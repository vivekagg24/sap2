/*	Application: CPR EntryAuthor: 	 DJ McNamara Date:		 March 2007	HoldDataFunctions.as - functions for handling the HOLD/SET/DELETE screen data functionality		pbHoldOptionsClickHandler		Click handler for Hold popup button	setScreenHoldData		Store the held data (story, contributor, pub date, on behalf of, gl, cost centre, project)	setHeldField		returns whether or not the field is now editable	setTextStyleName		Get the stylename for held text fields	setComboStyleName		Get the stylename for held comboxes	populateScreenFromHeldData		When the screen is being reset, populate fields that are held or set with the saved data	deleteHeldData		Clear out "held" data	*/	
import mx.controls.Alert;import mx.events.MenuEvent;
import ecs.generalClasses.EntryScreenHoldData;
import flash.display.DisplayObject;
import mx.core.UIComponent;
import mx.controls.TextInput;
import ecs.generalClasses.CPRItem;
import mx.effects.Effect;
import mx.effects.Glow;
import mx.effects.Blur;
import mx.events.EffectEvent;
import mx.effects.Dissolve;
import flash.utils.Timer;
import flash.events.TimerEvent;
import mx.core.IUIComponent;
import mx.styles.CSSStyleDeclaration;
import mx.controls.CheckBox;import mx.styles.StyleManager;
import mx.controls.ComboBox;	[Bindable]private var heldFieldEditable:Boolean=true;    //Distinguishes betwene HOLD and SET (SET is non-editable)/*	pbHoldOptionsClickHandler		Click handler for Hold popup button*/
private function pbHoldOptionsClickHandler(event:MenuEvent):void{
	Menu(pbHoldOptions.popUp).selectedIndex=0;	var effect:Effect;		switch (event.index){		case 0:		//Set			heldFieldEditable=false;			setScreenHoldData();			effect= new Glow(labHoldOptions);			labHoldOptions.text = "Set Data active";			effect.play();			break;		case 1:		//Hold			heldFieldEditable=true;			setScreenHoldData();			effect= new Glow(labHoldOptions);			labHoldOptions.text = "Hold Data active";			effect.play();			break;		case 2:		//Separator			break;		case 3:		//Delete held data			heldFieldEditable=true;			deleteHeldData();						// Dissolve the text to nothing				effect = new Dissolve(labHoldOptions);			(effect as Dissolve).alphaFrom = 1.0;			(effect as Dissolve).alphaTo = 0.0;			(effect as Dissolve).color = 0xEFF3F6;			effect.duration = 300; // miliseconds						// Set the text to empty just before the Dissolve effect finishes, otherwise the			// text will just reappear.			var timer:Timer = new Timer(250,1);			timer.addEventListener(TimerEvent.TIMER, ct );						// Start everything			timer.start();			effect.play();					break;   			}}
private function ct(event:TimerEvent):void {	labHoldOptions.text = " "	}/*	setScreenHoldData		Store the held data (story, contributor, pub date, on behalf of, gl, cost centre, project)*/
private function setScreenHoldData():void{
 		 	//Data is stored in global object
	holdData = new EntryScreenHoldData();		//Contributor name	holdData.contributorName = txtContributorName.text;	txtContributorName.editable=setHeldField(txtContributorName.text); 	txtContributorName.styleName=setTextStyleName(txtContributorName.text);	txtContributorName.tabEnabled=setHeldField(txtContributorName.text); 	forceStyleApplication(txtContributorName);					//Contributor number 	holdData.contributorNumber = txtContributor.text;
	txtContributor.editable=setHeldField(txtContributor.text); 	txtContributor.styleName=setTextStyleName(txtContributor.text);	txtContributor.tabEnabled=setHeldField(txtContributor.text); 	forceStyleApplication(txtContributor);			//Contributor's reference	holdData.contributorReference = txtContributorReference.text;	txtContributorReference.editable=setHeldField(txtContributorReference.text); 	txtContributorReference.styleName=setTextStyleName(txtContributorReference.text);	txtContributorReference.tabEnabled=setHeldField(txtContributorReference.text); 						//On behalf of	holdData.onBehalfOf = txtOnBehalfOf.text;	txtOnBehalfOf.editable=setHeldField(txtOnBehalfOf.text);	txtOnBehalfOf.styleName=setTextStyleName(txtOnBehalfOf.text);	txtOnBehalfOf.tabEnabled=setHeldField(txtOnBehalfOf.text);			//Only hold publication date if the user has deviated from the default	if (dtPubDate.text!=defaultPubDate){		holdData.publicationDate = dtPubDate.text;		dtPubDate.editable=setHeldField(dtPubDate.text);				dtPubDate.styleName=setTextStyleName(dtPubDate.text);		dtPubDate.tabEnabled=setHeldField(dtPubDate.text);		}			//Story	holdData.story = txtStory.text;	txtStory.editable=setHeldField(txtStory.text);	txtStory.styleName=setTextStyleName(txtStory.text);	txtStory.tabEnabled=setHeldField(txtStory.text);	forceStyleApplication(txtStory);		//Urgent flag (only hold if selected)	if (chkUrgent.selected)	{		holdData.urgentFlag = chkUrgent.selected;		chkUrgent.enabled=setHeldField(chkUrgent.selected);		chkUrgent.styleName=setTextStyleName(chkUrgent.selected);		chkUrgent.tabEnabled=setHeldField(chkUrgent.selected);	}		// Urgent reason	holdData.urgentReason = txtUrgentReason.text;	txtUrgentReason.editable=setHeldField(txtUrgentReason.text);	txtUrgentReason.styleName=setTextStyleName(txtUrgentReason.text);	txtUrgentReason.tabEnabled=setHeldField(txtUrgentReason.text);		// Page numbers	holdData.pageNumber = txtPageNumbers.text;	txtPageNumbers.editable=setHeldField(txtPageNumbers.text);	txtPageNumbers.styleName=setTextStyleName(txtPageNumbers.text);	txtPageNumbers.tabEnabled=setHeldField(txtPageNumbers.text);		// Held flag (if selected)	if (chkHeld.selected)	{		holdData.heldFlag = chkHeld.selected;		chkHeld.enabled=setHeldField(chkHeld.selected);		chkHeld.styleName=setTextStyleName(chkHeld.selected);		chkHeld.tabEnabled=setHeldField(chkHeld.selected);	}			//Item level	for (var i:int=0;i<CPRItems.length;i++){		holdData.items[i] = new CPRItem();				// Amount		holdData.items[i].amount=CPRItems[i].amount;		CPRItems[i].amountEditable = setHeldField(CPRItems[i].amount);		CPRItems[i].amountStyleName = setComboStyleName(CPRItems[i].amount);		// store editable boolean and stylename so that the item renderer knows how to display		holdData.items[i].amountEditable = CPRItems[i].amountEditable;		holdData.items[i].amountStyleName = CPRItems[i].amountStyleName;					// Currency (only if different to contributor default)		if (holdData.items[i].currency != this.contributorCurrency)		{			holdData.items[i].currency=CPRItems[i].currency;			CPRItems[i].currencyEditable = setHeldField(CPRItems[i].currency);			CPRItems[i].currencyStyleName = setComboStyleName(CPRItems[i].currency);			// store editable boolean and stylename so that the item renderer knows how to display			holdData.items[i].currencyEditable = CPRItems[i].currencyEditable;			holdData.items[i].currencyStyleName = CPRItems[i].currencyStyleName;					}										//Cost centre				holdData.items[i].costCentre=CPRItems[i].costCentre;		CPRItems[i].costCentreEditable = setHeldField(CPRItems[i].costCentre);		CPRItems[i].costCentreStyleName = setComboStyleName(CPRItems[i].costCentre);		// store editable boolean and stylename so that the item renderer knows how to display		holdData.items[i].costCentreEditable = CPRItems[i].costCentreEditable;		holdData.items[i].costCentreStyleName = CPRItems[i].costCentreStyleName;						//Only hold item category if it is not the default		if (CPRItems[i].itemCategory!=LINEAGE){			holdData.items[i].itemCategory = CPRItems[i].itemCategory;			CPRItems[i].itemCategoryEditable = setHeldField(CPRItems[i].itemCategory);			CPRItems[i].itemCategoryStyleName = setComboStyleName(CPRItems[i].itemCategory);			//Also store editable boolean and stylename so that the item renderer knows how to display			holdData.items[i].itemCategoryEditable = CPRItems[i].itemCategoryEditable;			holdData.items[i].itemCategoryStyleName = CPRItems[i].itemCategoryStyleName;		}						//GL Account		holdData.items[i].GLAccount = CPRItems[i].GLAccount;		//Also store editable boolean and stylename so that the item renderer knows how to display		CPRItems[i].GLAccountEditable = setHeldField(CPRItems[i].GLAccount);		CPRItems[i].GLAccountStyleName = setComboStyleName(CPRItems[i].GLAccount);		holdData.items[i].GLAccountEditable = CPRItems[i].GLAccountEditable;		holdData.items[i].GLAccountStyleName = CPRItems[i].GLAccountStyleName;				//Project		holdData.items[i].project = CPRItems[i].project;		CPRItems[i].projectEditable = setHeldField(CPRItems[i].project);
		CPRItems[i].projectStyleName = setComboStyleName(CPRItems[i].project);		//Also store editable boolean and stylename so that the item renderer knows how to display		holdData.items[i].projectEditable = CPRItems[i].projectEditable;		holdData.items[i].projectStyleName = CPRItems[i].projectStyleName;						}				dgItems.executeBindings();
}/*	setHeldField		returns whether or not the field is now editable*/private function setHeldField(value:Object):Boolean{	if (  (value is String && value !="") || (value is Boolean && value) )		{		return heldFieldEditable;	}	else	{		return true;	}}/*	setTextStyleName		Get the stylename for held text fields*/private function setTextStyleName(value:Object):String{	if  (  (value is String && value !="") || (value is Boolean && value) )	      	{		if (!heldFieldEditable ) return "disabled";		else return "holdable";	}	else{		return "textInputStyle";	}}/*	setComboStyleName		Get the stylename for held comboxes*/private function setComboStyleName(value:String):String{	if (value!="" ){		if (!heldFieldEditable ) return "disabled";		else return "holdable";	}	else{		return "textInputStyle";	}}/*	populateScreenFromHeldData		When the screen is being reset, populate fields that are held or set with the saved data*/private function populateScreenFromHeldData():void{	if (holdData!=null){  		    //Contributor Name	    txtContributorName.text=holdData.contributorName;		  	    			//Contributor number	    txtContributor.text=holdData.contributorNumber;	   	       	    //Contributor's reference	    txtContributorReference.text=holdData.contributorReference;	    //Story		txtStory.text=holdData.story;		//On behalf of		txtOnBehalfOf.text=holdData.onBehalfOf;		//Page Number		txtPageNumbers.text=holdData.pageNumber;		//Held flag		if (chkHeld.visible)		{			chkHeld.selected=holdData.heldFlag;			heldChanged();		}								// Urgent flag and reason		if (chkUrgent.visible)		{			chkUrgent.selected=holdData.urgentFlag;			if (chkUrgent.selected)				txtUrgentReason.text = holdData.urgentReason;			}		//Publication date		if (holdData.publicationDate!=null && holdData.publicationDate!=""){ 			dtPubDate.text=holdData.publicationDate;			dtPubDate.editable=setHeldField(holdData.publicationDate);			dtPubDate.tabEnabled=setHeldField(holdData.publicationDate);			dtPubDate.styleName=setTextStyleName(holdData.publicationDate);		}				/**Editable and stylename properties - i.e. grey out / non-editable?		 */		// Contributor Name		txtContributorName.editable=setHeldField(holdData.contributorName); 		txtContributorName.styleName=setTextStyleName(holdData.contributorName);			forceStyleApplication(txtContributorName);		 		// Contributor Number		txtContributor.editable=setHeldField(holdData.contributorNumber); 		txtContributor.styleName=setTextStyleName(holdData.contributorNumber);		forceStyleApplication(txtContributor);			// On behalf of				txtOnBehalfOf.editable=setHeldField(holdData.onBehalfOf);		txtOnBehalfOf.styleName=setTextStyleName(holdData.onBehalfOf);		forceStyleApplication(txtOnBehalfOf);			// Story			txtStory.editable=setHeldField(holdData.story);		txtStory.styleName=setTextStyleName(holdData.story);		forceStyleApplication(txtStory);		// Contributor's reference		txtContributorReference.editable=setHeldField(holdData.contributorReference);		txtContributorReference.styleName=setTextStyleName(holdData.contributorReference);				// Page Number		txtPageNumbers.editable=setHeldField(holdData.pageNumber);		txtPageNumbers.styleName=setTextStyleName(holdData.pageNumber);		forceStyleApplication(txtPageNumbers);		// Urgent reason		txtUrgentReason.editable=setHeldField(holdData.urgentReason);		txtUrgentReason.styleName=setTextStyleName(holdData.urgentReason);		// Flags		chkUrgent.enabled=setHeldField(holdData.urgentFlag);		chkHeld.enabled=setHeldField(holdData.heldFlag);								//Items - more than one line can be held		for (var i:int;i<holdData.items.length;i++){			if (CPRItems.length<i+1) CPRItems.push(new CPRItem)			if (holdData.items[i].amount!==""){				CPRItems[i].amount=holdData.items[i].amount;				CPRItems[i].amountEditable=holdData.items[i].amountEditable;				CPRItems[i].amountStyleName=holdData.items[i].amountStyleName;							}			if (holdData.items[i].currency!=""){				CPRItems[i].currency=holdData.items[i].currency; 				CPRItems[i].currencyEditable=holdData.items[i].currencyEditable;				CPRItems[i].currencyStyleName=holdData.items[i].currencyStyleName;								}						if (holdData.items[i].costCentre!==""){				CPRItems[i].costCentre=holdData.items[i].costCentre;				CPRItems[i].costCentreEditable=holdData.items[i].costCentreEditable;				CPRItems[i].costCentreStyleName=holdData.items[i].costCentreStyleName;			}			if (holdData.items[i].itemCategory!==""){				CPRItems[i].itemCategory=holdData.items[i].itemCategory;				CPRItems[i].itemCategoryEditable=holdData.items[i].itemCategoryEditable;				CPRItems[i].itemCategoryStyleName=holdData.items[i].itemCategoryStyleName;			}			if (holdData.items[i].GLAccount!==""){					CPRItems[i].GLAccount=holdData.items[i].GLAccount;				CPRItems[i].GLAccountEditable=holdData.items[i].GLAccountEditable;				CPRItems[i].GLAccountStyleName=holdData.items[i].GLAccountStyleName;			}			if (holdData.items[i].project!==""){				CPRItems[i].project=holdData.items[i].project;				CPRItems[i].projectEditable=holdData.items[i].projectEditable;					CPRItems[i].projectStyleName=holdData.items[i].projectStyleName;					}							}				    }	    }/*	deleteHeldData		Clear out "held" data*/private function deleteHeldData():void{	holdData = new EntryScreenHoldData();		txtContributorName.editable=true;	txtContributor.editable=true;	txtContributorReference.editable=true;	txtOnBehalfOf.editable=true;		dtPubDate.editable=true;		txtStory.editable=true;	txtUrgentReason.editable=true;	txtPageNumbers.editable=true;			txtContributorName.styleName="";	txtContributor.styleName=""; 	txtContributorReference.styleName="";	txtOnBehalfOf.styleName="";	dtPubDate.styleName="";	txtStory.styleName="";	txtUrgentReason.styleName="";	txtPageNumbers.styleName="";		txtContributorName.tabEnabled=true;	txtContributor.tabEnabled=true; 	txtContributorReference.tabEnabled=true; 	txtOnBehalfOf.tabEnabled=true;	dtPubDate.tabEnabled=true;	txtStory.tabEnabled=true;	txtUrgentReason.tabEnabled=true;	txtPageNumbers.tabEnabled=true;				forceStyleApplication(txtContributorName);	forceStyleApplication(txtContributor);	forceStyleApplication(txtContributorReference);	forceStyleApplication(txtOnBehalfOf);	forceStyleApplication(dtPubDate)	forceStyleApplication(txtStory)	forceStyleApplication(txtUrgentReason)	forceStyleApplication(txtPageNumbers);		// Flags	chkUrgent.enabled=true;	chkHeld.enabled=true;		for (var i:int=0;i<CPRItems.length;i++){		holdData.items[i] = new CPRItem();				CPRItems[i].amountEditable = true;		CPRItems[i].amountStyleName = "";		CPRItems[i].currencyEditable = true;		CPRItems[i].currencyStyleName = "";						CPRItems[i].costCentreEditable =  true;		CPRItems[i].costCentreStyleName="";		CPRItems[i].itemCategoryEditable = true;		CPRItems[i].itemCategoryStyleName="";		CPRItems[i].GLAccountEditable = true;		CPRItems[i].GLAccountStyleName="";		CPRItems[i].projectEditable = true;		CPRItems[i].projectStyleName="";	}			dgItems.executeBindings();
}private function isContributorHeld(includeSet:Boolean = false):Boolean{		if (!holdData)			return false;			if (!txtContributorName.editable && holdData.contributorName.length > 0	    && !txtContributor.editable && holdData.contributorNumber.length > 0 )	    	 return true;	    else if (includeSet && holdData.contributorName.length > 0 &&	             holdData.contributorNumber.length > 0)	         return true;	    else	    	return false;
}private function areAllCostCentresHeld(includeSet:Boolean = false):Boolean{	if (!holdData || !holdData.items) return false; // No held data 		if (holdData.items.length == 0) return false; // No line items in held data		for each (var item:CPRItem in holdData.items)	{		if (item.costCentre.length == 0)			return false;				if (item.costCentreEditable && !includeSet)			return false;		}		return true;	
}/** Applies the style name and removes any overrides (such as border colour set by *  validators) */private function forceStyleApplication(field:Object):void{	// If its a text field, make sure its not empty	if (field.hasOwnProperty("text") && field.text == "")		return;			// If its a checkbox, make sure its selected	if (field is CheckBox && (field as CheckBox).selected == false)		return;	 	// Make sure field accepts styles		if (!field.hasOwnProperty("styleName"))		return;			// Work out the style declaration of the object based on its class and style name	var dec:CSSStyleDeclaration;	var styleName:String = field.styleName;	var styleClass:String = "";		if (field is TextInput)		styleClass = "TextInput";			if (field is CheckBox)		styleClass = "CheckBox";			if (field is ComboBox)		styleClass = "ComboBox";			if (styleClass != "" && styleName != "")	dec = StyleManager.getStyleDeclaration(styleClass + "." + styleName);		if (!dec && styleName != "")	dec = StyleManager.getStyleDeclaration( "." + styleName);		if (!dec && styleClass != "")	dec = StyleManager.getStyleDeclaration(styleClass);		if (!dec) return;		field.setStyle("borderColor", dec.getStyle("borderColor"));	field.setStyle("border-thickness", dec.getStyle("border-thickness"));	field.setStyle("border-style", dec.getStyle("border-style"));	field.invalidateProperties();	field.invalidateDisplayList();	field.validateNow(); // Update it NOW!!!
}