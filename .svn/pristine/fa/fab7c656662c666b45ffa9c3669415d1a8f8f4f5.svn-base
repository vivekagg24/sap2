<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
	 xmlns:mx="http://www.adobe.com/2006/mxml" 
	 xmlns:ecs="ecs.approval.components.*"  
	 xmlns:ni="ni.components.*"
	 layout="absolute"
	 creationComplete="startApp()"
	 backgroundColor="#D4D4D4" 	    
	 creationPolicy="all" 
	 initialize="setWSDLPath()"
	 height="100%"
	 horizontalScrollPolicy="off"
	 verticalScrollPolicy="off"
	 resize="resizeCPRPopup()"
	 >
	  
<!--
Application: ECS Payment approval (desk head and managing editor)
Author: 	 DJ McNamara 
Date:		 March 2007

Overview:
	This is the approval screen for ECS, handling approval by interim approvers, desk heads and managing editors.
	The flex application sits communicates with the back end via 3 principle web services (RFCs on SAP):
		Z_ECS_GET_APPROVAL_SEL_SCREEN
		Z_ECS_GET_APPROVAL_DATA
		Z_ECS_APPROVE_CPRS
	
	The application loads the selection screen on the creationComplete Event.
	The selection screen is dependent on the user's role - e.g. desk administrator or managing editor
	Cost centre selection is based on the user's settings in the table ZECSUSERCC
	"Batch number" and "entered by" dropdowns are generated based on the full data list that would appear if the
	user was to run the report for all data.
	
	The list is generated based on the user's selection choice and is displayed in a datagrid.
	The standard flex grid has been modified to allow for a hierarchy. In this case the hierarchy is 3 level:
		Cost centre
			Batch (not shown for desk heads and interim approvers)
				Payment
	
	CAS Integration:
	The application can run stand alone or slotted into the Common Approval System.
	The portal role for the common approval system access is cas_ecs_approver.
	
		Event listening
			The application listens to the following events generated by CAS using the Enterprise Portal Client Framework
			ECS_APPROVE - triggers approval
			ECS_REFRESH - triggers a refresh of the report
			ECS_REJECT (which is declined)
		Drill-in
			When loaded the application can receive the CAS dashboard XML which has a selection of cost centres
--> 
	<mx:Script source="ecs/approval/approvalScripts/DataDeclarations.as" />

	<mx:Script> 
		<![CDATA[
			import ecs.popups.MessageDisplay;
			import ecs.popups.DoublePaymentWarning;
			import mx.managers.*;
			import flash.utils.setInterval;
			import mx.events.ListEvent;
			import mx.collections.ArrayCollection;
			import ecs.approval.approvalGridFields.*;
			import ecs.components.*; 
			import flash.external.ExternalInterface;
			import mx.containers.*;
			import mx.controls.*;
			import mx.core.Container;
			import mx.core.BitmapAsset;
			import mx.formatters.CurrencyFormatter;
			import mx.formatters.DateFormatter;
			import mx.formatters.Formatter;
			import mx.core.Container;
			import ni.components.*;
			
			// We use this flag to change how we send stuff for approval
			// either inn one go or in blocks
			private var useProgressBar:Boolean = true;
			
			private var swfmodule_cpr_entry:String; // URL of CPR Entry Flex application (swf)
			
			/*
				setWSDlPath
				if running locally or on the SAP server set the path to the web service 
				wsdl files appropriately
			*/
			private function setWSDLPath():void{
					
				if( Security.sandboxType == Security.REMOTE ){
					//Running on the SAP WebAS
					WSDLPrefix = WSDL_SICF_PREFIX + "services=";
					swfmodule_cpr_entry = "/sap/bc/bsp/sap/zecs_cpr/CPREntry.swf";   
					;
					 
				}
				else{
					//Running from the Flex IDE
					 WSDLPrefix = LIVE_SERVER       	// Which SAP server should we connect to?
				              	+ WSDL_SICF_PREFIX
				             	+ SAP_CLIENT       	// Which SAP client should we connect to?
				            	+ "services=" ; 
				     if (application.url.toString().indexOf("debug") > -1)
				     {
				     	swfmodule_cpr_entry = "CPREntry-debug.swf";   	
				     }
				     else
				     {
				     	swfmodule_cpr_entry = "CPREntry.swf";   	
				     }	
				}
											
			}
			/*
				getData
				 Call web service wrapper for Z_ECS_GET_APPROVAL_DATA which returns all the 
				 payments for approval
					
			*/
			private function getData():void {
				var arrItems:Array = new Array();	//Arr of cost centre XML nodes passed as parameter to RFC
				var i:int = 0;
				var cc:XML ;						//Cost centre XML node
				var numVal:String="";				//Numeric value (for "amounts greater than" selection criteria)
				var commas:RegExp = /,/g; 			//Reg exp to remove commas from amount field
				
				//Get all the cost centres from the list box and populate structure for web service
				for each(var item:valueForDropdown in lstCostCentres.selectedItems) {
					cc = new XML("<item><COST_CENTRE></COST_CENTRE></item>");
					cc.COST_CENTRE = item.data;
					arrItems[i] = cc;		
					i++;
				}
				
				// Check that the user hasn't selected "Not Authorised by Desk Head" and "Exclude CPRs not batched",
				// since this doesn't make sense.
				if (chkExcludeBatched.selected && rbDeskHead.selected)
				{
					var message:String;
					message = "CPRs are not batched until after they have been approved by a deskhead. Therefore, ";
					message += "selecting both 'Exclude CPRs not Batched' and 'Not authorised by Deskhead' will result";
					message += " in no CPRs being returned.";
					Alert.show(message,"Invalid selection");
					return;
				}
				
				
				// Interim approval radiobuttons
				if (rbInterim.selected)
				{
					interimSel = "X";
					noInterimSel = "";
					interimNoInterimSel = "";
						
				}
				else if (rbNoInterim.selected)
				{
					interimSel = "";
					noInterimSel = "X";
					interimNoInterimSel = "";
				}
				else
				{
					interimSel = "";
					noInterimSel = "";
					interimNoInterimSel = "X";
				}
			
				//A cost centre choice has been made?
				if (i > 0) {
        			//Urgent payments only flag
        			if (chkUrgentOnly.selected) urgentOnlySel = "X";
        			else urgentOnlySel="";
        			//Exclude payments not batched flag
        			if (chkExcludeBatched.selected) excludeNotBatchedSel = "X";
        			else excludeNotBatchedSel="";
        			//Batch date
        			batchDate =  getDateForSAP(dtBatchDate.text); 
        			//Flags for getting desk head level and managing editor level
        			setMEandDHFlags();
        			//Store open cost centre and batch nodes
        			storeOpenNodes();        			
        			//Populate unbound parameters for web service and send
        			ws1.Z_ECS_GET_APPROVAL_DATA.request.IM_T_COST_CENTRES = arrItems;
        			numVal=txtGreaterThanValue.text.replace(commas,"");
        			ws1.Z_ECS_GET_APPROVAL_DATA.request.IM_GT_VALUE = Number(numVal);
					ws1.Z_ECS_GET_APPROVAL_DATA.send();
				} else {
					Alert.show("Please select at least one cost centre",MESSAGE_TITLE_APPROVAL);
				}
			}				
			
			/*
				submitApproval
					Submit the approval RFC Z_ECS_APPROVE_CPRS
			*/
			private function submitApproval(event:Event):void{				
				if (Application.application.enabled == false)  return;		
 
				Application.application.enabled=false;
				
				wsApprove.Z_ECS_APPROVE_CPRS.request.IM_T_CPRS = arrSelected;
				
				// Are we bereaking the list of CPRs for approval into multiple
				// jobs and sending separately (and showing a progress bar)
				useProgressBar = !(approvalJobSize 	== 0);
				
				// If we are set to use a progress bar, work out how many payments we will approve
				// and see if it is still worthwhile
				if (useProgressBar)
				{					
					// ME Approval is much slower (since it posts documents using BDC),
					// so use smaller job sizes
					if (this.managingEditor)
					{
						ioApproveCPRs.stepSize = 40;     // Use large batches for => 100 approvals
						
						if (arrSelected.length < 100)    // Use smaller batches for <100 approvers
							ioApproveCPRs.stepSize = 20;
							
						if (arrSelected.length < 30)    // Use smaller batches still for low numbers of approval
							ioApproveCPRs.stepSize = 6; // This makes the progress bar smoother and makes better 
							                            // use of parallel processing.
							                          
						if (ioApproveCPRs.stepSize < approvalJobSize)  // If a minimum job size is set in SAP,
							ioApproveCPRs.stepSize = approvalJobSize;  // we must be over this.                     
					}	
					else // Deskhead / Interim approval is fast so do 50 at a time
					{
						ioApproveCPRs.stepSize = 50;	
					}
					
					// Now that we know what our batch size will be, make sure its smaller than the 
					// total number of payments, otherwise its not worth bothering with batching or
					// the progress bar.
					if (ioApproveCPRs.stepSize >= arrSelected.length)
						useProgressBar = false;	
					
				}
				
				// Still use progress bar?
				if (useProgressBar)
				{
					ioApproveCPRs.innerOperator = wsApprove.Z_ECS_APPROVE_CPRS;
					ioApproveCPRs.request.IM_T_CPRS = arrSelected;					
					ioApproveCPRs.progressText = "Approving";					
					ioApproveCPRs.parallelProcesses = maxParallelProcesses;
					ioApproveCPRs.send();	
				}				
				else
				{
					ioApproveCPRs.innerOperator = null;
					wsApprove.Z_ECS_APPROVE_CPRS.request.IM_T_CPRS = arrSelected;
					wsApprove.Z_ECS_APPROVE_CPRS.send();
				}	
			    
				

			}		
			
			/** Meausre the screen and place subcomponents as appropriate			    
			*/
			override protected function measure():void
			{
				super.measure();				
				//positionBatchUrgentOnly();		
				positionBox(cnvBatchChoice, 1000);
				positionBox(cnvStatusChoice0, 850);
				positionBox(cnvStatusChoice1, 850);
				
			}
			
			/** Function to refresh the DataGrid
			*/
			import mx.events.CollectionEventKind;
			public function refreshGrid():void
			{
				var ev:CollectionEvent = new CollectionEvent(CollectionEvent.COLLECTION_CHANGE, false, true, CollectionEventKind.REFRESH);
				dp.dispatchEvent(ev);
			}
				
				
				
			
			
			/** Positions the box in either the normal or additional selection criteria,
			* depending on the screen size. If the size of the application is bigger than 
			* the given limit, it appears in the normal "Selection Criteria" section,
			* otherwise it appears in the "Additonal Selection Criteria" section.
			*/			 
			private function positionBox(boxToPosition:Container, sizeLimit:uint):void
			{
				var appwidth:int = Application.application.width;
				
				// Determine where to place the "Batched only" and "Urgent Only" boxes
				if (appwidth < sizeLimit) 
				{
					if (boxToPosition.parent !== hbAdditionalSelectionCriteria)
					{	// Move the selection box to Additional Selection Criteria					
						hbSelectionCriteria.removeChild(boxToPosition);
						hbAdditionalSelectionCriteria.addChild(boxToPosition);							
					}					
				}
				else
				{
					if (boxToPosition.parent === hbAdditionalSelectionCriteria)					
					{	// Move the selection box to Selection Criteria					
						hbAdditionalSelectionCriteria.removeChild(boxToPosition);
						hbSelectionCriteria.addChild(boxToPosition);				
					}													
				}	
			}
			
			/** Positions the box containing the "Not Authorised by Deskhead" and the box
			 * containing the "Interim approved only" checkboxes.
			 * They are placed in either the normal or additional selection criteria,
			 * depending on the screen size.
			 */
			private function positionStatusSelections():void
			{
				var appwidth:int = Application.application.width;
				
				// Determine where to place the boxes
				if (appwidth < 870) 
				{
					if (cnvBatchChoice.parent !== cnvAdditionalSelectionCriteria)
					{	// Move the selection box to Additional Selection Criteria					
						cnvSelectionCriteria.removeChild(cnvBatchChoice);
						cnvAdditionalSelectionCriteria.addChild(cnvBatchChoice);
						cnvBatchChoice.x=260;
						cnvBatchChoice.y=10;						
					}					
				}
				else
				{
					if (cnvBatchChoice.parent === cnvAdditionalSelectionCriteria)					
					{	// Move the selection box to Selection Criteria					
						cnvAdditionalSelectionCriteria.removeChild(cnvBatchChoice);
						cnvSelectionCriteria.addChild(cnvBatchChoice);
						cnvBatchChoice.x=884;
						cnvBatchChoice.y=10;						
					}													
				}	
			}
			
			private function toggleHideShowText(obj:UIComponent, s:String, button:Object):void
			{
					if (obj.visible)
					{
						obj.visible = false;
						obj.includeInLayout = false;
						button.label = ('Show ' + s);
					}					
					else
					{
						obj.visible = true;
						obj.includeInLayout = true;
						button.label = ('Hide ' + s);
					}
					topCanvas.autoLayout = true;						

			}
			
	
			
			
		]]>
	</mx:Script>
	<!--Script for manipulating the grid-->
	<mx:Script source="ecs/approval/approvalScripts/GridFunctions.as"></mx:Script>
	<!--Script for handling the callbacks from web services-->
	<mx:Script source="ecs/approval/approvalScripts/WebServiceCallBack.as"></mx:Script>
	<!--Script for handling CAS interaction and initial setup of the application-->
	<mx:Script source="ecs/approval/approvalScripts/SetUpAndCAS.as"></mx:Script>
	<!--Script for handling interaction with the user-->
	<mx:Script source="ecs/approval/approvalScripts/UserInteraction.as"></mx:Script>
	<!--General utilities-->
	<mx:Script source="ecs/scripts/Utilities.as"></mx:Script>
	<!--Constants-->
	<mx:Script source="ecs/CPREntryScripts/Data/Constants.as"></mx:Script>
	<mx:Style source="ECS.css"/>
	
	<!--Validate the greater than amount field (currency)-->
	<mx:NumberValidator
		id="validGTAmount"
	    decimalSeparator="."
	    allowNegative="false"
	    source="{txtGreaterThanValue}"
	    property="text">
	</mx:NumberValidator>
	
	<!--Glow for cost centre choice labels-->
	<mx:Glow id="effGlow" duration="1500" repeatCount="3"></mx:Glow>

	
	<mx:WebService id="ws1"
	    showBusyCursor="true"
	    wsdl="{WSDLPrefix}Z_ECS_PUT_ON_QUERY,Z_ECS_GET_APPROVAL_DATA,Z_ECS_GET_APPROVAL_SEL_SCREEN"
	    >
	    <mx:operation name="Z_ECS_PUT_ON_QUERY" resultFormat="e4x" concurrency="multiple">
			<mx:request xmlns="">
	    		<IM_BELNR></IM_BELNR>
	    		<IM_GJAHR></IM_GJAHR>
	    		<IM_QUERY_STRING></IM_QUERY_STRING>
			</mx:request>
		</mx:operation>
		
	    <mx:operation name="Z_ECS_GET_APPROVAL_DATA"  
	    	 resultFormat="e4x" concurrency="single"
	    	 result="getDataCallBack(event.result)"
	    	 >
	    	<mx:request>
	    		<IM_PUBID>{comboPubID.selectedItem.data}</IM_PUBID>
	    		<IM_DESK_HEAD>{deskHeadSel}</IM_DESK_HEAD>
	    		<IM_MAN_EDITOR>{manEdSel}</IM_MAN_EDITOR>
	    		<IM_BATCH>{comboBatches.selectedItem.data}</IM_BATCH>
	    		<IM_BATCH_DATE>{batchDate}</IM_BATCH_DATE>
	    		<IM_GT_VALUE>0.0</IM_GT_VALUE>
	    		<IM_EXCLUDE_NOT_BATCHED>{excludeNotBatchedSel}</IM_EXCLUDE_NOT_BATCHED>
	    		<IM_ENTERED_BY>{comboEnteredBy.selectedItem.data}</IM_ENTERED_BY>
	    		<IM_URGENT_ONLY>{urgentOnlySel}</IM_URGENT_ONLY>
	    		<IM_AWAITING_INTERIM>{interimSel}</IM_AWAITING_INTERIM>
	    		<IM_NOT_AWAITING_INTERIM>{noInterimSel}</IM_NOT_AWAITING_INTERIM>
	    		<IM_INTERIM_AND_NOT>{interimNoInterimSel}</IM_INTERIM_AND_NOT>
	    		<IM_T_COST_CENTRES></IM_T_COST_CENTRES>	    		
	    		<IM_COST_CENTRE_LOW></IM_COST_CENTRE_LOW>
	    		<IM_COST_CENTRE_HIGH></IM_COST_CENTRE_HIGH>
	    		<CH_T_REPORT></CH_T_REPORT>
	    	</mx:request>
		</mx:operation>	

	    <mx:operation name="Z_ECS_GET_APPROVAL_SEL_SCREEN"  
	    	 resultFormat="e4x" concurrency="single"
	    	 result="getSelScreenCallBack(event.result)"
	    	 >
	    	<mx:request>
	    		<IM_PUBID>{comboPubID.selectedItem.data}</IM_PUBID>
	    		<IM_DESK_HEAD>{deskHeadSel}</IM_DESK_HEAD>
	    		<IM_MAN_EDITOR>{manEdSel}</IM_MAN_EDITOR>
	    		<CH_T_COST_CENTRES></CH_T_COST_CENTRES>
	    		<CH_T_BATCHES></CH_T_BATCHES>
	    		<CH_T_ENTERED_BY></CH_T_ENTERED_BY>
	    		<CH_T_PUBLICATIONS></CH_T_PUBLICATIONS>
	    	</mx:request>
		</mx:operation>					
	</mx:WebService>



	<!--Z_ECS_APPROVE_CPRS: approve the selected payments-->
	
	<ni:IterativeOperation id="ioApproveCPRs"		                   
		                   parallelProcesses="2"                   
		                   progressFactory="ni.components.NIProgressBar"
		                   All_operations_complete="approveIterativeCallBack(event.result)"
		                   Some_operations_complete="approveIterativeCallBackPartial(event.result)"
		                   No_operations_complete="handleApproveCprsFault(event)"
		                   >
		<!-- Remove this comment to activate the iterative operator -->                   
		<!--<ni:innerOperator>{wsApprove.Z_ECS_APPROVE_CPRS}</ni:innerOperator> --> 
	</ni:IterativeOperation> 
	
	
	<mx:WebService id="wsApprove"
		wsdl="{WSDLPrefix}Z_ECS_APPROVE_CPRS"
		useProxy="false"
		result="approveCallBack(event.result)"
	    fault="handleApproveCprsFault(event)"
		showBusyCursor="true">
		<mx:operation name="Z_ECS_APPROVE_CPRS" resultFormat="e4x" concurrency="multiple">
			<mx:request xmlns="">
	    		<IM_PUBID>{comboPubID.selectedItem.data}</IM_PUBID>
	    		<IM_T_CPRS></IM_T_CPRS>
			</mx:request>
		</mx:operation>
	</mx:WebService>

	
<!-- To ensure scrollbars appear when the screen is below a certain width, we wrap
	 everything in a top-level canvas and set the minWidth. Setting the minWidth on
	 the Application has no effect -->	
<mx:VBox id="topCanvas" width="100%"
	                    minWidth="800"
	                    height="100%"
	                    verticalScrollPolicy="off"	                    
	                    >
	
	
	<!--SELECTION-SCREEN-->
	<mx:TabNavigator x="1" y="2" width="100%" height="156" fillColors="[#D4D4D4, #D4D4D4]"
		 id="tabSelectionCriteria" creationPolicy="all">
		

		<mx:Canvas label="SELECTION CRITERIA" width="100%" height="100%" backgroundColor="#F2F2F2" activate="runCCEffects()" horizontalScrollPolicy="off" verticalScrollPolicy="off" id="cnvSelectionCriteria">
			<mx:HBox id="hbSelectionCriteria" styleName="approvalSelection">				
				<mx:Canvas x="10" y="10" width="268" height="103" backgroundColor="#cacaff" backgroundAlpha=".25" borderStyle="outset">
					<mx:Label x="10" y="12" text="Publication " fontWeight="bold"/>
					<mx:ComboBox x="89" y="10" id="comboPubID"
						dataProvider="{publications}"
						change="loadScreen()"
				    	labelField="label"></mx:ComboBox>
					<mx:Label x="10" y="71" text="£ Value &gt;" fontWeight="bold"/>
					<mx:TextInput x="89" y="67" id="txtGreaterThanValue" width="102" enter="getData()"/>
					<mx:Label x="10" y="38" text="Entered By" fontWeight="bold"/>
					<mx:ComboBox x="89" y="36" id="comboEnteredBy" dataProvider="{createdByList}"></mx:ComboBox>
				</mx:Canvas>
				<mx:Canvas x="292" y="10" width="330" height="103" backgroundColor="#cacaff" backgroundAlpha=".25" borderStyle="outset">
					<mx:Image x="34" y="36" source="@Embed('images/sell_all.gif')" 
						click="selAllCostCentres(true)"
				    	toolTip="Select All"
						useHandCursor="true" buttonMode="true"/>
					<mx:Image x="10" y="36" source="@Embed('images/desel_all.gif')" 
						click="selAllCostCentres(false)"
						toolTip="Deselect All"
						useHandCursor="true" buttonMode="true"/>
					<mx:List x="95" y="0" width="221" height="93"
						id="lstCostCentres"
				    	selectable="true"
				    	allowMultipleSelection="true"
						dataProvider="{costCentres}"
				    	labelField="label"></mx:List>
					<mx:Label x="10" y="10" text="Cost Centres" fontWeight="bold" id="labelCCRange"/>
				</mx:Canvas>			
		
				<mx:Canvas id="cnvStatusChoice0"
				   		    x="636" y="10"
				 	   	  	width="228" height="103"
				     	  	borderStyle="outset"
				      	 	visible="{managingEditor}"
				      	 	includeInLayout="{managingEditor}"
				      	 	backgroundColor="#cacaff" backgroundAlpha=".25">
					<mx:RadioButton x="10" y="10" groupName="rbgStatus" id="rbDeskHead" label="Not Authorised by Desk Head" fontWeight="bold" />
					<mx:RadioButton x="10" y="36" groupName="rbgStatus" id="rbNotDeskHead" label="Authorised By Desk Head" fontWeight="bold" selected="true"/>
					<mx:RadioButton x="10" y="60" groupName="rbgStatus" id="rbAll" label="Both Statuses" fontWeight="bold" selected="false"/>
				</mx:Canvas>
				<mx:Canvas x="876" y="10" width="136" height="84" borderStyle="outset" id="cnvBatchChoice" includeInLayout="{managingEditor}" visible="{managingEditor}" backgroundColor="#cacaff" backgroundAlpha=".25">
					<mx:CheckBox x="10" y="10" label="Batched Only" fontWeight="bold" id="chkExcludeBatched"
						change="checkboxChange(chkExcludeBatched,excludeNotBatchedSel)" height="29" width="110"/>
					<mx:CheckBox id="chkUrgentOnly" x="10" y="36" label="Urgent Only" fontWeight="bold"
						change="checkboxChange(chkUrgentOnly,urgentOnlySel)" height="30" width="110"/>
				</mx:Canvas>
				<mx:Canvas id="cnvStatusChoice1"
				     	  	x="636" y="10"
				       		width="228" height="103"
				     	  	borderStyle="outset"				 
				     	  	visible="{ifBothTrue(!managingEditor, !interimDeskHeadOnly)}"
				      	 	includeInLayout="{ifBothTrue(!managingEditor, !interimDeskHeadOnly)}"
				    		 backgroundColor="#cacaff" backgroundAlpha=".25">
					<mx:RadioButton x="10" y="10" groupName="rbgStatus2" id="rbInterim" label="Awaiting interim approval" fontWeight="bold" visible="{ifBothTrue(!managingEditor, !interimDeskHeadOnly)}"/>
					<mx:RadioButton x="10" y="34" groupName="rbgStatus2" id="rbNoInterim" label="Awaiting approval" fontWeight="bold" selected="true"/>
					<mx:RadioButton x="10" y="60" groupName="rbgStatus2" id="rbInterimNoInterim" label="Both Statuses" fontWeight="bold" selected="false"/>
				</mx:Canvas>				
			</mx:HBox>
			<mx:Image y="0" source="@Embed('images/Logo_bgr.gif')" right="5" visible="false"/>
		</mx:Canvas>
		<mx:Canvas label="ADDITIONAL SELECTION CRITERIA" width="100%" height="124" backgroundColor="#F2F2F2" y="-10" verticalScrollPolicy="off" horizontalScrollPolicy="off" visible="{managingEditor}" id="cnvAdditionalSelectionCriteria">
			<mx:HBox borderStyle="none" id="hbAdditionalSelectionCriteria" styleName="approvalSelection">
				<mx:Canvas x="10" y="10" width="232" height="102" backgroundColor="#cacaff" backgroundAlpha=".25" borderStyle="outset"  includeInLayout="{managingEditor}" visible="{managingEditor}">
					<mx:ComboBox x="56" y="10" id="comboBatches" dataProvider="{batches}" />
					<mx:DateField x="87" y="49" width="117" id="dtBatchDate" enabled="true" editable="true" formatString="DD/MM/YYYY"/>
					<mx:Label x="10" y="12" text="Batch" fontWeight="bold" />
					<mx:Label x="10" y="51" text="Batch Date" fontWeight="bold" toolTip="This is the date the payments were &quot;Batched&quot;" />
				</mx:Canvas>							
			</mx:HBox>
		</mx:Canvas>
	</mx:TabNavigator>
	
	<mx:Canvas id="pnlItemsArea" x="0" width="100%" height="100%" verticalScrollPolicy="off">
	  <mx:MenuBar x="2" y="0" width="646" height="22"></mx:MenuBar>
	    <ecs:Button1 id="btnExpand" x="2" y="0" width="36" enabled="true" toolTip="Expand Items" 
		  click="expandItem()" icon="@Embed('images/s_b_aexp.gif')" />
	    <ecs:Button1 id="btnCollapse" x="39" y="0" width="36" enabled="true" toolTip="Collapse Items" 
		  click="collapseItem()" icon="@Embed('images/s_b_acom.gif')" />
		<mx:Button y="0" label="Run Report" fillColors="[#fee960, #fee960]" click="getData()" width="127" fillAlphas="[.39, .39]" x="83">
			<mx:toolTip>Select all items based on the current selection criteria</mx:toolTip>
		</mx:Button>
		<mx:Button x="218"
			       y="0" 
			       label="Hide Selection Criteria"
			       fillColors="[#fee960, #fee960]"
			       click="toggleHideShowText(tabSelectionCriteria, 'Selection Criteria' , btnToggleSelCriteria); "
			       width="162"
			       id="btnToggleSelCriteria"
			       fillAlphas="[.39, .39]" >
		</mx:Button>	

	<!-- REPORT HIERARCHICAL GRID-->
		<ecs:ECSDataGrid 		   
			columns="{columns}" 
			dataProvider="{dp}" 
			id="dg" width="99%" 
			itemClick="itemClickEvent(event);" 
			selectable="true"
			selectionColor="#B6FFB6"
			rollOverColor="#E6E6E6"
			x="2" 
			top="22"
			bottom="22" 		    
			lockedColumnCount="3"
			styleName="variantDataGrid"	
		    verticalScrollPolicy="auto"
		    horizontalScrollPolicy="auto" 		    	       
			><!--
			hideShowColumns="true"
			columnHideShowDuration="400"
			columnShowAfterDuration="0"
			columnHideShowGradual="true"
			columnHideColor="0xFFF0F0"
			columnShowColor="0xF0FFF0"			
			-->
			
		</ecs:ECSDataGrid>
		<mx:Button y="0" width="127"
			       label="Approve Selected"
			       click="confirmApprove()"
			       fillColors="[#80ff00, #80ff00]" fillAlphas="[0.39, 0.39]"
			       includeInLayout="{runningStandalone}"
			       visible="{runningStandalone}"  x="887">
		    				<mx:toolTip>Approve the items you have selected on the report (payments where the "selected" checkbox is set)</mx:toolTip>
		</mx:Button>

		
		
	
	</mx:Canvas>  
	 
	</mx:VBox>
</mx:Application>
