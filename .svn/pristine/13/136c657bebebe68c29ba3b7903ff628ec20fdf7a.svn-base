<!-- saved from url=(0014)about:internet -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<title>ShowItems.mxml</title>
<link rel="stylesheet" type="text/css" href="../../../SourceStyles.css"/>
</head>

<body><pre><span class="mxmlCdata">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
<span class="mxmlComponent">&lt;mx:Image</span> xmlns:mx=&quot;<span class="mxmlString">http://www.adobe.com/2006/mxml</span>&quot;  
             xmlns:ns1=&quot;<span class="mxmlString">visualComponents.GridComponents.*</span>&quot;
          source=&quot;<span class="mxmlString">@Embed(&apos;../../HR/images/expand_tree.gif&apos;)</span>&quot; click=&quot;onClick<span class="asBracket">()</span>&quot; width=&quot;<span class="mxmlString">13</span>&quot; maxWidth=&quot;<span class="mxmlString">13</span>&quot;<span class="mxmlComponent">&gt;</span> 
    <span class="mxmlTag">&lt;mx:Script&gt;</span>
        <span class="asOperator">&lt;!</span><span class="asBracket">[</span>CDATA<span class="asBracket">[</span>
            <span class="asReserved">import</span> mx.events.DynamicEvent;

            <span class="asBracket">[</span>Embed <span class="asBracket">(</span>source<span class="asOperator">=</span><span class="asString">&quot;../../HR/images/contract_tree.gif&quot;</span> <span class="asBracket">)]</span>
            <span class="asReserved">public</span> <span class="asReserved">static</span> <span class="asReserved">const</span> ContractIm<span class="asOperator">:</span>Class;
        

            <span class="asBracket">[</span>Embed <span class="asBracket">(</span>source<span class="asOperator">=</span><span class="asString">&quot;../../HR/images/expand_tree.gif&quot;</span> <span class="asBracket">)]</span>
            <span class="asReserved">public</span> <span class="asReserved">static</span> <span class="asReserved">const</span> ExpandIm<span class="asOperator">:</span>Class;    
        
            <span class="asReserved">private</span> <span class="asVar">var</span> _isOpen<span class="asOperator">:</span>Boolean;
            <span class="asReserved">public</span> <span class="asFunction">function</span> <span class="asReserved">set</span> isOpen<span class="asBracket">(</span>value<span class="asOperator">:</span>Boolean<span class="asBracket">)</span><span class="asOperator">:</span><span class="asReserved">void</span>
            <span class="asBracket">{</span>
                _isOpen <span class="asOperator">=</span> value;
                setIcon<span class="asBracket">()</span>;                
            <span class="asBracket">}</span>
            <span class="asReserved">public</span> <span class="asFunction">function</span> <span class="asReserved">get</span> isOpen<span class="asBracket">()</span><span class="asOperator">:</span>Boolean
            <span class="asBracket">{</span>
                <span class="asReserved">return</span> _isOpen;
            <span class="asBracket">}</span>
        
            <span class="asReserved">private</span> <span class="asFunction">function</span> onClick<span class="asBracket">()</span><span class="asOperator">:</span><span class="asReserved">void</span>
            <span class="asBracket">{</span>
                <span class="asComment">// First change the icon, then dispatch the event
</span>                <span class="asVar">var</span> event<span class="asOperator">:</span>DynamicEvent <span class="asOperator">=</span> <span class="asReserved">new</span> DynamicEvent<span class="asBracket">(</span><span class="asString">&quot;showItems&quot;</span>, <span class="asReserved">true</span><span class="asBracket">)</span>;
                
                _isOpen <span class="asOperator">=</span> <span class="asOperator">!</span>isOpen;        
                
                <span class="asComment">// Set the icon to open or closed
</span>                setIcon<span class="asBracket">()</span>;
            
                event.isOpen <span class="asOperator">=</span> isOpen;
                <span class="asReserved">this</span>.dispatchEvent<span class="asBracket">(</span>event<span class="asBracket">)</span>;
            <span class="asBracket">}</span>
            
            <span class="asReserved">private</span> <span class="asFunction">function</span> setIcon<span class="asBracket">()</span><span class="asOperator">:</span><span class="asReserved">void</span>
            <span class="asBracket">{</span>
                <span class="asReserved">if</span> <span class="asBracket">(</span>_isOpen<span class="asBracket">)</span>
                <span class="asBracket">{</span>
                    <span class="asReserved">this</span>.source<span class="asOperator">=</span><span class="asReserved">this</span>.source<span class="asOperator">=</span>ContractIm; <span class="asComment">//&quot;HR/images/contract_tree.gif&quot;;
</span>                    <span class="asReserved">this</span>.toolTip <span class="asOperator">=</span> <span class="asString">&apos;Collapse line&apos;</span>;
                <span class="asBracket">}</span>
                <span class="asReserved">else</span>
                <span class="asBracket">{</span>
                    <span class="asReserved">this</span>.source<span class="asOperator">=</span>ExpandIm; <span class="asComment">//&quot;HR/images/expand_tree.gif&quot;;
</span>                    <span class="asReserved">this</span>.toolTip <span class="asOperator">=</span> <span class="asString">&apos;Expand line&apos;</span>;
                <span class="asBracket">}</span>                
            <span class="asBracket">}</span>
            
            
        <span class="asBracket">]]</span><span class="asOperator">&gt;</span>
    <span class="mxmlTag">&lt;/mx:Script&gt;</span>
    <span class="mxmlTag">&lt;mx:Metadata&gt;</span>
           <span class="mxmlCdata">[Event(name=&quot;showItems&quot;, type=&quot;mx.events.DynamicEvent&quot;)]
   </span><span class="mxmlTag">&lt;/mx:Metadata&gt;</span>
<span class="mxmlComponent">&lt;/mx:Image&gt;</span></pre></body>
</html>
