// ActionScript file - Handle data from R3
import mx.rpc.events.ResultEvent;
import mx.collections.XMLListCollection;
import mx.core.Application;import mx.controls.Alert;
import mx.managers.PopUpManager;
import components.MessageDisplay;



protected function resultPossibleSubs(event:ResultEvent):void{	// Add the names of the systems	var r:XMLListCollection = new XMLListCollection(event.result.SUBSTITUTES);	possibleSubs  = r;		updateProgBarR3();}
protected function resultCurrentSubs(event:ResultEvent):void{	// Add the names of the systems	var l:XMLList;		l = event.result.SUBSTITUTIONS.item;	var r:XMLListCollection = new XMLListCollection(event.result.SUBSTITUTIONS.item);	addGroupNames(r); // Prepare for data grid, 	dgMySubstitutions.dataProvider = r;		l = event.result.SUBSTITUTED.item;	var s:XMLListCollection = new XMLListCollection(event.result.SUBSTITUTED.item);	addGroupNames(s); // Prepare for data grid, 	dgISubstituteFor.dataProvider = s;		updateProgBarR3();		messageTitle = "Message from retrieving current substitutes";	var _messages:XMLList = new XMLList(event.result.RE_T_MESSAGES.item);			if (_messages.length() != 0)	{		this.messages = _messages;		popUp = mx.managers.PopUpManager.createPopUp(this, components.MessageDisplay, true );		popUp.x = 40;		popUp.y = 40;	}}// Update the progress bar, depending on which R3 function modules have returned// Since they are called asynchronously, either could be returned firstprivate function updateProgBarR3():void{	var count_done:int = 0;	if (this.wsR3.Z_CAS_GET_SUBSTITUTES_CURRENT.lastResult) count_done++;	if (this.wsR3.Z_CAS_GET_POSSIBLE_SUBS.lastResult) count_done++;		if (count_done == 1)	{		this.progBar.setProgress(3, 4);	}	else if (count_done == 2)	{		this.progBar.setProgress(4, 4);		this.topPanel.visible = true;		this.progBar.visible = false;		this.btSave.enabled = true;		this.showPanel = true;	}		}protected function addGroupNames(list:XMLListCollection):XMLListCollection{	for each (var x:XML in list)	{		// System description		var grpid:String = x.SUBAPPSGRP;				var desc:String = getGroupName(grpid);			x.GROUPDESC = desc;						// Acitve / inactive		var active_x:String = x.ACTIVE;		x.ACTIVE_TXT = convertActiveFromSAP( active_x );				// Dates		x.BEGDATUM = convertDateFromSAP( new String( x.BEGDATUM ));		x.ENDDATUM = convertDateFromSAP( new String( x.ENDDATUM ));	}		return list;}/* protected function addSystemNames(list:XMLListCollection):XMLListCollection{	for each (var x:XML in list)	{		// System description		var sid:String = x.SID;		 		var desc:String = getSystemName(sid);			x.SYSTEM_NAME = desc;						// Acitve / inactive		var active_x:String = x.ACTIVE;		x.ACTIVE_TXT = convertActiveFromSAP( active_x );				// Dates		x.BEGDATUM = convertDateFromSAP( new String( x.BEGDATUM ));		x.ENDDATUM = convertDateFromSAP( new String( x.ENDDATUM ));	}		return list;
} */public function save():void{	var xl:XMLList;	var x:XML;		// Copy the data in the data grids	// Remember we can use XML, but it has to be in an array, not an XML list		/////////////////////	// Substituted	/////////////////////	xl = new XMLList(this.dgISubstituteFor.dataProvider.toString());	var substituted_save:Array = [];	for each (x in xl)	{		x.ACTIVE = convertActiveToSAP(x.ACTIVE_TXT)		x.BEGDATUM = convertDateToSAP(x.BEGDATUM);		x.ENDDATUM = convertDateToSAP(x.ENDDATUM);				substituted_save.push(x);	}	wsR3.Z_CAS_MAINTAIN_SUBSTITUTES.request.SUBSTITUTED = substituted_save;	/////////////////////	// Substitutions	/////////////////////		xl = new XMLList(this.dgMySubstitutions.dataProvider.toString());	var substitutions_save:Array = [];	for each (x in xl)	{		x.ACTIVE = convertActiveToSAP(x.ACTIVE_TXT)		x.BEGDATUM = convertDateToSAP(x.BEGDATUM);		x.ENDDATUM = convertDateToSAP(x.ENDDATUM);				substitutions_save.push(x);	}	wsR3.Z_CAS_MAINTAIN_SUBSTITUTES.request.SUBSTITUTIONS = substitutions_save;			///////////////////////	// Save	//////////////////////	mx.core.Application.application.enabled = false;	wsR3.Z_CAS_MAINTAIN_SUBSTITUTES.send();		    // The data will be refreshed after the save
}	// Handle results of saving to SAP	protected function resultSave(event:ResultEvent):void	{		mx.core.Application.application.enabled = true;		setDirty(false);				messageTitle = "Message from saving substitutions";		var _messages:XMLList = new XMLList(event.result.RE_T_MESSAGES.item);				if (_messages.length() == 0)		{			Alert.show("Substitutes Saved OK");		}		else		{			this.messages = _messages;			popUp = mx.managers.PopUpManager.createPopUp(this, components.MessageDisplay, true );			popUp.x = 40;			popUp.y = 40;		}				// Now refresh data		refreshFromR3();	}		protected function refreshFromR3():void	{		wsR3.Z_CAS_GET_POSSIBLE_SUBS.send();		wsR3.Z_CAS_GET_SUBSTITUTES_CURRENT.send();			}