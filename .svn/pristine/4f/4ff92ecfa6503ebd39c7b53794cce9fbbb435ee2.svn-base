<!-- saved from url=(0014)about:internet -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<title>TableOutput.mxml</title>
<link rel="stylesheet" type="text/css" href="../../SourceStyles.css"/>
</head>

<body><pre><span class="mxmlCdata">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
<span class="mxmlComponent">&lt;mx:Canvas</span> xmlns:mx=&quot;<span class="mxmlString">http://www.adobe.com/2006/mxml</span>&quot;
           xmlns:ns1=&quot;<span class="mxmlString">visualComponents.GridComponents.*</span>&quot;
           borderThickness=&quot;<span class="mxmlString">5</span>&quot; 
           initialize=&quot;init<span class="asBracket">()</span>;&quot;     
           horizontalScrollPolicy=&quot;<span class="mxmlString">off</span>&quot; 
           verticalScrollPolicy=&quot;<span class="mxmlString">off</span>&quot;<span class="mxmlComponent">&gt;</span>
           

    <span class="mxmlTag">&lt;mx:Metadata&gt;</span>
        <span class="mxmlCdata">[Event(name=&quot;userSort&quot;, type=&quot;mx.events.DynamicEvent&quot;)]
    </span><span class="mxmlTag">&lt;/mx:Metadata&gt;</span>
    <span class="mxmlTag">&lt;mx:Metadata&gt;</span>
        <span class="mxmlCdata">[Event(name=&quot;showItems&quot;, type=&quot;mx.events.DynamicEvent&quot;)]
    </span><span class="mxmlTag">&lt;/mx:Metadata&gt;</span>
    <span class="mxmlTag">&lt;mx:Metadata&gt;</span>
        <span class="mxmlCdata">[Event(name=&quot;displayNotes&quot;, type=&quot;mx.events.DynamicEvent&quot;)]
    </span><span class="mxmlTag">&lt;/mx:Metadata&gt;</span>    

    <span class="mxmlTag">&lt;mx:Script&gt;</span>
        <span class="asOperator">&lt;!</span><span class="asBracket">[</span>CDATA<span class="asBracket">[</span>
            <span class="asReserved">import</span> mx.binding.utils.ChangeWatcher;
            <span class="asReserved">import</span> mx.controls.dataGridClasses.DataGridListData;
            <span class="asReserved">import</span> visualComponents.GridComponents.Expand;
            <span class="asReserved">import</span> visualComponents.GridComponents.ShowItemsCanvas;
            <span class="asReserved">import</span> visualComponents.GridComponents.Selectall;
            <span class="asReserved">import</span> visualComponents.GridComponents.OutputCheckbox;
            <span class="asReserved">import</span> visualComponents.GridComponents.RightLabel;
            <span class="asReserved">import</span> visualComponents.GridComponents.Action;
            <span class="asReserved">import</span> visualComponents.GridComponents.NoteIcon;
            <span class="asReserved">import</span> visualComponents.GridComponents.AppRejTextBox;
            <span class="asReserved">import</span> HR.Components.DateField1;
            <span class="asReserved">import</span> visualComponents.GridComponents.DateLabel;
            <span class="asReserved">import</span> visualComponents.GridComponents.ShowItems;
            <span class="asReserved">import</span> mx.controls.Alert;            
            <span class="asReserved">import</span> mx.controls.TextInput;
            <span class="asReserved">import</span> mx.controls.dataGridClasses.DataGridItemRenderer;
            <span class="asReserved">import</span> mx.controls.Image;
            <span class="asReserved">import</span> mx.events.DataGridEvent;
            <span class="asReserved">import</span> mx.controls.TextArea;
            <span class="asReserved">import</span> mx.controls.Label;
            <span class="asReserved">import</span> mx.controls.CheckBox;
            <span class="asReserved">import</span> mx.core.Repeater;
            <span class="asReserved">import</span> mx.events.DynamicEvent;
            <span class="asReserved">import</span> mx.controls.dataGridClasses.DataGridColumn;
            <span class="asReserved">import</span> VDG.TipRenderer;
            
            <span class="asReserved">private</span> <span class="asFunction">function</span> init<span class="asBracket">()</span><span class="asOperator">:</span><span class="asReserved">void</span>
            <span class="asBracket">{</span>
                <span class="asReserved">this</span>.addEventListener<span class="asBracket">(</span><span class="asString">&quot;showItems&quot;</span>, onShowItems<span class="asBracket">)</span>;
                
                <span class="asComment">// Work out whether we have items every time data binding is triggered on ext_data
</span>                mx.binding.utils.ChangeWatcher.watch<span class="asBracket">(</span><span class="asReserved">this</span>, <span class="asString">&quot;ext_data&quot;</span>,  innerGridBinding<span class="asBracket">)</span>;
                mx.binding.utils.ChangeWatcher.watch<span class="asBracket">(</span><span class="asReserved">this</span>, <span class="asString">&quot;allItems&quot;</span>,  innerGridBinding<span class="asBracket">)</span>;
            <span class="asBracket">}</span>
            
            <span class="asReserved">public</span> <span class="asFunction">function</span> collapse<span class="asBracket">()</span><span class="asOperator">:</span><span class="asReserved">void</span>
            <span class="asBracket">{</span>
                <span class="asComment">// Now collapse
</span>                hb1.visible<span class="asOperator">=</span><span class="asReserved">false</span>; hb1.includeInLayout <span class="asOperator">=</span> <span class="asReserved">false</span>;
            <span class="asBracket">}</span>
            
            <span class="asReserved">public</span> <span class="asFunction">function</span> expand<span class="asBracket">()</span><span class="asOperator">:</span><span class="asReserved">void</span>
            <span class="asBracket">{</span>
                <span class="asComment">// firstly, create the grid if it hasn&apos;t yet been created
</span>                <span class="asReserved">if</span> <span class="asBracket">(</span><span class="asOperator">!</span>dg1<span class="asBracket">)</span>
                <span class="asBracket">{</span>
                    dg1 <span class="asOperator">=</span> addInnerGrid<span class="asBracket">()</span>;    
                <span class="asBracket">}</span>    
                <span class="asReserved">else</span> <span class="asComment">// just set up inner grid
</span>                <span class="asBracket">{</span>                
                    setUpInnerGrid<span class="asBracket">(</span>dg1<span class="asBracket">)</span>;                        
                <span class="asBracket">}</span>            
                <span class="asComment">// Now expand
</span>                hb1.visible<span class="asOperator">=</span><span class="asReserved">true</span>; hb1.includeInLayout <span class="asOperator">=</span> <span class="asReserved">true</span>; 
            <span class="asBracket">}</span>
            
            <span class="asReserved">public</span> <span class="asFunction">function</span> selectLine<span class="asBracket">()</span><span class="asOperator">:</span><span class="asReserved">void</span>
            <span class="asBracket">{</span>
                <span class="asReserved">if</span> <span class="asBracket">(</span>ext_data<span class="asBracket">)</span>
                <span class="asBracket">{</span>
                    ext_data.APPREJ <span class="asOperator">=</span> <span class="asString">&apos;X&apos;</span>;
                <span class="asBracket">}</span>
            <span class="asBracket">}</span>

            <span class="asReserved">public</span> <span class="asFunction">function</span> deSelectLine<span class="asBracket">()</span><span class="asOperator">:</span><span class="asReserved">void</span>
            <span class="asBracket">{</span>
                <span class="asReserved">if</span> <span class="asBracket">(</span>ext_data<span class="asBracket">)</span>
                <span class="asBracket">{</span>
                    <span class="asBracket">(</span>ext_data <span class="asReserved">as</span> XML<span class="asBracket">)</span>.replace<span class="asBracket">(</span><span class="asString">&quot;APPREJ&quot;</span>, <span class="asReserved">new</span> XML<span class="asBracket">(</span><span class="asOperator">&lt;</span>x<span class="asOperator">/&gt;</span><span class="asBracket">))</span>;
                    ext_data.APPREJ <span class="asOperator">=</span> <span class="asString">&apos; &apos;</span>;
                <span class="asBracket">}</span>
            <span class="asBracket">}</span>            
            
            <span class="asReserved">private</span> <span class="asFunction">function</span> onShowItems<span class="asBracket">(</span>event<span class="asOperator">:</span>DynamicEvent<span class="asBracket">)</span><span class="asOperator">:</span><span class="asReserved">void</span>
            <span class="asBracket">{</span>
                <span class="asReserved">if</span> <span class="asBracket">(</span>event.isOpen<span class="asBracket">)</span>
                <span class="asBracket">{</span>
                    expand<span class="asBracket">()</span>; 
                <span class="asBracket">}</span>
                <span class="asReserved">else</span>
                <span class="asBracket">{</span>
                    collapse<span class="asBracket">()</span>; 
                <span class="asBracket">}</span>
            <span class="asBracket">}</span>
                
            <span class="asBracket">[</span><span class="asMetadata">Bindable</span><span class="asBracket">]</span>
            <span class="asReserved">public</span> <span class="asVar">var</span> twidth<span class="asOperator">:</span>Number;
                    
            <span class="asComment">// The data item from the external repeater
</span>            <span class="asBracket">[</span><span class="asMetadata">Bindable</span><span class="asBracket">]</span>
            <span class="asReserved">public</span> <span class="asVar">var</span> ext_data<span class="asOperator">:</span>Object; 
            
            <span class="asComment">// If this data item is in an array, this is the index of the item in the array
</span>            <span class="asBracket">[</span><span class="asMetadata">Bindable</span><span class="asBracket">]</span>
            <span class="asReserved">public</span> <span class="asVar">var</span> ext_index<span class="asOperator">:</span>int;
            
            <span class="asComment">// Reference to items
</span>            <span class="asBracket">[</span><span class="asMetadata">Bindable</span><span class="asBracket">]</span>
            <span class="asReserved">public</span> <span class="asVar">var</span> allItems<span class="asOperator">:</span>Object;
            
            <span class="asComment">// Array containing formatting widths
</span>            <span class="asBracket">[</span><span class="asMetadata">Bindable</span><span class="asBracket">]</span>
            <span class="asReserved">public</span> <span class="asVar">var</span> formatArray<span class="asOperator">:</span>Array;
            
            <span class="asComment">// The data format
</span>            <span class="asBracket">[</span><span class="asMetadata">Bindable</span><span class="asBracket">]</span>
            <span class="asReserved">public</span> <span class="asVar">var</span> formatXML<span class="asOperator">:</span>XMLList;

            <span class="asComment">// Display the column header
</span>            <span class="asBracket">[</span><span class="asMetadata">Bindable</span><span class="asBracket">]</span>
            <span class="asReserved">public</span> <span class="asFunction">function</span> displayTitle<span class="asBracket">()</span><span class="asOperator">:</span>Boolean
            <span class="asBracket">{</span>
                 <span class="asReserved">if</span> <span class="asBracket">(</span>ext_index <span class="asOperator">==</span> 0<span class="asBracket">)</span>
                    <span class="asReserved">return</span> <span class="asReserved">true</span>;
                <span class="asReserved">else</span> 
                    <span class="asReserved">return</span> <span class="asReserved">false</span>;
            <span class="asBracket">}</span>        
        
            <span class="asComment">// Set the row height
</span>            <span class="asBracket">[</span><span class="asMetadata">Bindable</span><span class="asBracket">]</span>
            <span class="asReserved">public</span> <span class="asFunction">function</span> setHeight<span class="asBracket">()</span><span class="asOperator">:</span>int
            <span class="asBracket">{</span>
                <span class="asReserved">if</span> <span class="asBracket">(</span>ext_index <span class="asOperator">==</span> 0<span class="asBracket">)</span>
                    <span class="asReserved">return</span> 82;
                <span class="asReserved">else</span>
                    <span class="asReserved">return</span> 42;
            <span class="asBracket">}</span>
        
            <span class="asReserved">public</span> <span class="asReserved">static</span> <span class="asVar">var</span> openIcon<span class="asOperator">:</span>Class;
            
            <span class="asReserved">public</span> <span class="asFunction">function</span> getMyItems<span class="asBracket">(</span>items<span class="asOperator">:</span>Object,  repeaterData<span class="asOperator">:</span>Object<span class="asBracket">)</span><span class="asOperator">:</span>XMLList
            <span class="asBracket">{</span>
                <span class="asComment">// Get the items
</span>                <span class="asVar">var</span> l_workflow_id<span class="asOperator">:</span>String <span class="asOperator">=</span> repeaterData.WIID;
                <span class="asVar">var</span> l_items<span class="asOperator">:</span>XMLList <span class="asOperator">=</span> <span class="asReserved">new</span> XMLList<span class="asBracket">(</span>items.<span class="asBracket">(</span>WIID<span class="asOperator">==</span>l_workflow_id<span class="asBracket">))</span>;
                
                <span class="asComment">// Tell the main datagrid whether to show an expand/collapse button
</span>                <span class="asReserved">if</span> <span class="asBracket">(</span>l_items.length<span class="asBracket">()</span> <span class="asOperator">==</span> 0<span class="asBracket">)</span>
                <span class="asBracket">{</span>
                    repeaterData.hasItems <span class="asOperator">=</span> <span class="asString">&quot;false&quot;</span>;
        <span class="asOperator">&lt;!--</span>            repeaterData.hasItems <span class="asOperator">=</span> <span class="asString">&quot;true&quot;</span>;  <span class="asOperator">--&gt;</span>
                <span class="asBracket">}</span>
                <span class="asReserved">else</span>
                <span class="asBracket">{</span>
                    repeaterData.hasItems <span class="asOperator">=</span> <span class="asString">&quot;true&quot;</span>;
                <span class="asBracket">}</span>
                <span class="asReserved">return</span> l_items;
                
                
            <span class="asBracket">}</span>
            
            <span class="asReserved">protected</span> <span class="asFunction">function</span> getColumns<span class="asBracket">(</span>format_XML<span class="asOperator">:</span>XMLList<span class="asBracket">)</span><span class="asOperator">:</span>Array
            <span class="asBracket">{</span>
                <span class="asReserved">if</span> <span class="asBracket">(</span><span class="asOperator">!</span>format_XML <span class="asOperator">||</span> <span class="asBracket">(</span>format_XML <span class="asReserved">is</span> XMLList <span class="asOperator">&amp;&amp;</span> <span class="asBracket">(</span>format_XML <span class="asReserved">as</span> XMLList<span class="asBracket">)</span>.length<span class="asBracket">()</span> <span class="asOperator">==</span> 0<span class="asBracket">))</span>
                    <span class="asReserved">return</span> <span class="asBracket">[]</span>;
                    
                <span class="asVar">var</span> _cols<span class="asOperator">:</span>Array <span class="asOperator">=</span> <span class="asReserved">new</span> Array<span class="asBracket">()</span>;
                <span class="asVar">var</span> col<span class="asOperator">:</span>DataGridColumn;
                <span class="asVar">var</span> firstLoop<span class="asOperator">:</span>Boolean <span class="asOperator">=</span> <span class="asReserved">true</span>;
                <span class="asVar">var</span> inner<span class="asOperator">:</span>XML <span class="asOperator">=</span> <span class="asReserved">new</span> XML<span class="asBracket">(</span>format_XML<span class="asBracket">[</span>0<span class="asBracket">])</span>;
                
                <span class="asReserved">for</span> <span class="asReserved">each</span> <span class="asBracket">(</span><span class="asVar">var</span> field<span class="asOperator">:</span>XML <span class="asReserved">in</span> inner.field<span class="asBracket">)</span>
                <span class="asBracket">{</span>
                    <span class="asVar">var</span> width<span class="asOperator">:</span>int <span class="asOperator">=</span> int<span class="asBracket">(</span>field.@width<span class="asBracket">)</span>;
                    <span class="asVar">var</span> field_name<span class="asOperator">:</span>String <span class="asOperator">=</span> field.@dataField;
                    <span class="asVar">var</span> field_type<span class="asOperator">:</span>String <span class="asOperator">=</span> field.@type;
                    <span class="asVar">var</span> column_title<span class="asOperator">:</span>String <span class="asOperator">=</span> field.@columnTitle;
                                        
                                    <span class="asComment">//    mx.controls.listClasses.ListBase;
</span>                                    <span class="asComment">//    mx.controls.dataGridClasses.DataGridBase;
</span>                    col <span class="asOperator">=</span> <span class="asReserved">new</span> DataGridColumn<span class="asBracket">()</span>;
                    col.dataField <span class="asOperator">=</span> field_name;
                    col.width <span class="asOperator">=</span> width;
                    col.headerText <span class="asOperator">=</span> column_title;
                    col.headerRenderer <span class="asOperator">=</span> createColumnHeaderWithHoverText<span class="asBracket">(</span>column_title<span class="asBracket">)</span>;
                    col.wordWrap <span class="asOperator">=</span> <span class="asReserved">true</span>;
                    
                    <span class="asReserved">switch</span><span class="asBracket">(</span>field_type<span class="asBracket">)</span>
                    <span class="asBracket">{</span>
                        <span class="asReserved">case</span> <span class="asString">&quot;checkbox&quot;</span><span class="asOperator">:</span>
                            col.sortable <span class="asOperator">=</span> <span class="asReserved">false</span>;                            
                            col.headerRenderer <span class="asOperator">=</span> <span class="asReserved">new</span> ClassFactory<span class="asBracket">(</span>visualComponents.GridComponents.Selectall<span class="asBracket">)</span>;
                           <span class="asComment">// col.itemRenderer = new ClassFactory(mx.controls.CheckBox);    
</span>                            col.itemRenderer <span class="asOperator">=</span> <span class="asReserved">new</span> ClassFactory<span class="asBracket">(</span>visualComponents.GridComponents.EditableCheckboxCanvas<span class="asBracket">)</span>;                        
                            <span class="asReserved">break</span>;
                        <span class="asReserved">case</span> <span class="asString">&quot;OutputCheckbox&quot;</span><span class="asOperator">:</span>
                            col.sortable <span class="asOperator">=</span> <span class="asReserved">false</span>;                            
                            col.itemRenderer <span class="asOperator">=</span> <span class="asReserved">new</span> ClassFactory<span class="asBracket">(</span>visualComponents.GridComponents.OutputCheckboxCanvas<span class="asBracket">)</span>;
                            <span class="asReserved">break</span>;                            
                        <span class="asReserved">case</span> <span class="asString">&quot;LineCheckbox&quot;</span><span class="asOperator">:</span>
                            col.sortable <span class="asOperator">=</span> <span class="asReserved">false</span>;                            
                            col.itemRenderer <span class="asOperator">=</span> <span class="asReserved">new</span> ClassFactory<span class="asBracket">(</span>visualComponents.GridComponents.OutputCheckboxLine<span class="asBracket">)</span>;
                            <span class="asReserved">break</span>;
                        <span class="asReserved">case</span> <span class="asString">&quot;Label&quot;</span><span class="asOperator">:</span>
                            col.sortable <span class="asOperator">=</span> <span class="asReserved">true</span>;                
                            col.itemRenderer <span class="asOperator">=</span> <span class="asReserved">new</span> ClassFactory<span class="asBracket">(</span>mx.controls.Label<span class="asBracket">)</span>;
                            <span class="asReserved">break</span>;
                        <span class="asReserved">case</span> <span class="asString">&quot;TextArea&quot;</span><span class="asOperator">:</span>
                            col.sortable <span class="asOperator">=</span> <span class="asReserved">true</span>;                
                            col.itemRenderer <span class="asOperator">=</span> <span class="asReserved">new</span> ClassFactory<span class="asBracket">(</span>visualComponents.GridComponents.TextArea1<span class="asBracket">)</span>;
                            <span class="asReserved">break</span>;                            
                        <span class="asReserved">case</span> <span class="asString">&quot;RightLabel&quot;</span><span class="asOperator">:</span>
                            col.sortable <span class="asOperator">=</span> <span class="asReserved">true</span>;
                            col.itemRenderer <span class="asOperator">=</span> <span class="asReserved">new</span> ClassFactory<span class="asBracket">(</span>visualComponents.GridComponents.RightLabel<span class="asBracket">)</span>;
                            <span class="asReserved">break</span>;                            
                        <span class="asReserved">case</span> <span class="asString">&quot;textbox&quot;</span><span class="asOperator">:</span>
                            col.sortable <span class="asOperator">=</span> <span class="asReserved">false</span>;
                            col.itemRenderer <span class="asOperator">=</span> <span class="asReserved">new</span> ClassFactory<span class="asBracket">(</span>visualComponents.GridComponents.AppRejTextBox<span class="asBracket">)</span>;
                            <span class="asReserved">break</span>;
                        <span class="asReserved">case</span> <span class="asString">&quot;image&quot;</span><span class="asOperator">:</span>
                            col.sortable <span class="asOperator">=</span> <span class="asReserved">false</span>;
                            col.itemRenderer <span class="asOperator">=</span> <span class="asReserved">new</span> ClassFactory<span class="asBracket">(</span>mx.controls.Image<span class="asBracket">)</span>;
                            <span class="asReserved">break</span>;
                        <span class="asReserved">case</span> <span class="asString">&quot;lineImage&quot;</span><span class="asOperator">:</span>
                            col.sortable <span class="asOperator">=</span> <span class="asReserved">false</span>;
                            col.headerRenderer <span class="asOperator">=</span> <span class="asReserved">new</span> ClassFactory<span class="asBracket">(</span>visualComponents.GridComponents.Expand<span class="asBracket">)</span>;
                            col.itemRenderer <span class="asOperator">=</span> <span class="asReserved">new</span> ClassFactory<span class="asBracket">(</span>visualComponents.GridComponents.ShowItemsCanvas<span class="asBracket">)</span>;
                            <span class="asReserved">break</span>;
                        <span class="asReserved">case</span> <span class="asString">&quot;lineIm&quot;</span><span class="asOperator">:</span>
                            col.sortable <span class="asOperator">=</span> <span class="asReserved">false</span>;
                            col.itemRenderer <span class="asOperator">=</span> <span class="asReserved">new</span> ClassFactory<span class="asBracket">(</span>visualComponents.GridComponents.ShowItemsCanvas<span class="asBracket">)</span>;
                            <span class="asReserved">break</span>;
                        <span class="asReserved">case</span> <span class="asString">&quot;dateLabel&quot;</span><span class="asOperator">:</span>
                            col.sortable <span class="asOperator">=</span> <span class="asReserved">true</span>;
                            col.itemRenderer <span class="asOperator">=</span> <span class="asReserved">new</span> ClassFactory<span class="asBracket">(</span>visualComponents.GridComponents.DateLabel<span class="asBracket">)</span>;
                            <span class="asReserved">break</span>;
                        <span class="asReserved">case</span> <span class="asString">&quot;NoteIcon&quot;</span><span class="asOperator">:</span>
                            col.sortable <span class="asOperator">=</span> <span class="asReserved">false</span>;
                            col.itemRenderer <span class="asOperator">=</span> <span class="asReserved">new</span> ClassFactory<span class="asBracket">(</span>visualComponents.GridComponents.NoteIcon<span class="asBracket">)</span>;
                            <span class="asReserved">break</span>;
                        <span class="asReserved">case</span> <span class="asString">&quot;HeldIcon&quot;</span><span class="asOperator">:</span>
                            col.sortable <span class="asOperator">=</span> <span class="asReserved">false</span>;
                            col.itemRenderer <span class="asOperator">=</span> <span class="asReserved">new</span> ClassFactory<span class="asBracket">(</span>visualComponents.GridComponents.HeldIcon<span class="asBracket">)</span>;
                            <span class="asReserved">break</span>;                            
                        <span class="asReserved">case</span> <span class="asString">&quot;SubIcon&quot;</span><span class="asOperator">:</span>
                            col.sortable <span class="asOperator">=</span> <span class="asReserved">false</span>;
                            col.itemRenderer <span class="asOperator">=</span> <span class="asReserved">new</span> ClassFactory<span class="asBracket">(</span>visualComponents.GridComponents.DateLabel<span class="asBracket">)</span>;
                            <span class="asReserved">break</span>;                            
                        <span class="asReserved">case</span> <span class="asString">&quot;InOutIcon&quot;</span><span class="asOperator">:</span>
                            col.sortable <span class="asOperator">=</span> <span class="asReserved">false</span>;
                            col.itemRenderer <span class="asOperator">=</span> <span class="asReserved">new</span> ClassFactory<span class="asBracket">(</span>visualComponents.GridComponents.InOutIcon<span class="asBracket">)</span>;
                            <span class="asReserved">break</span>;        
                        <span class="asReserved">case</span> <span class="asString">&quot;Action&quot;</span><span class="asOperator">:</span>
                            col.sortable <span class="asOperator">=</span> <span class="asReserved">false</span>;
                            col.itemRenderer <span class="asOperator">=</span> <span class="asReserved">new</span> ClassFactory<span class="asBracket">(</span>visualComponents.GridComponents.Action<span class="asBracket">)</span>;
                            <span class="asReserved">break</span>;                            
                        <span class="asReserved">default</span><span class="asOperator">:</span>
                            col.sortable <span class="asOperator">=</span> <span class="asReserved">true</span>;
                            col.itemRenderer <span class="asOperator">=</span> <span class="asReserved">new</span> ClassFactory<span class="asBracket">(</span>mx.controls.Label<span class="asBracket">)</span>;
                            <span class="asReserved">break</span>;
                    <span class="asBracket">}</span>
                    
                    _cols.push<span class="asBracket">(</span>col<span class="asBracket">)</span>;
                    firstLoop <span class="asOperator">=</span> <span class="asReserved">false</span>;
                <span class="asBracket">}</span>                
                <span class="asReserved">return</span> _cols;
            <span class="asBracket">}</span>        
            
            <span class="asComment">// Remember which column was sorted last
</span>            <span class="asReserved">protected</span> <span class="asVar">var</span> _sortColumnIndex<span class="asOperator">:</span>int <span class="asOperator">=</span> <span class="asOperator">-</span>1;
            
            <span class="asComment">// Remember sort order
</span>            <span class="asReserved">protected</span> <span class="asVar">var</span> sortOrder<span class="asOperator">:</span>int <span class="asOperator">=</span> 0;
            
            <span class="asComment">// When the user sorts the header grid, we actuall want to sort the dataprovider of the outside repeater
</span>            <span class="asReserved">protected</span> <span class="asFunction">function</span> onGridSort<span class="asBracket">(</span>event<span class="asOperator">:</span>DataGridEvent<span class="asBracket">)</span><span class="asOperator">:</span><span class="asReserved">void</span>
            <span class="asBracket">{</span>
                <span class="asVar">var</span> new_event<span class="asOperator">:</span>DynamicEvent <span class="asOperator">=</span> <span class="asReserved">new</span> DynamicEvent<span class="asBracket">(</span><span class="asString">&quot;userSort&quot;</span>, <span class="asReserved">true</span><span class="asBracket">)</span>;
                <span class="asVar">var</span> fXML<span class="asOperator">:</span>XML <span class="asOperator">=</span> formatXML.headerFields<span class="asBracket">[</span>0<span class="asBracket">]</span>;
                <span class="asVar">var</span> data_field<span class="asOperator">:</span>String <span class="asOperator">=</span> fXML.field<span class="asBracket">[</span>event.columnIndex<span class="asBracket">]</span>.@dataField;
                new_event.field <span class="asOperator">=</span> data_field;
                
                <span class="asComment">// Collapse before sorting (otherwise we get weird stuff happening)
</span>                <span class="asVar">var</span> collapseEvent<span class="asOperator">:</span>DynamicEvent <span class="asOperator">=</span> <span class="asReserved">new</span> DynamicEvent<span class="asBracket">(</span><span class="asString">&quot;collapseAll&quot;</span>, <span class="asReserved">true</span><span class="asBracket">)</span>;    
                collapseEvent.grid <span class="asOperator">=</span> event.currentTarget;            
                <span class="asReserved">this</span>.dispatchEvent<span class="asBracket">(</span>collapseEvent<span class="asBracket">)</span>;                
                
                <span class="asComment">// Ascending or descending
</span>                <span class="asReserved">if</span> <span class="asBracket">(</span>event.columnIndex <span class="asOperator">!=</span> _sortColumnIndex<span class="asBracket">)</span>
                <span class="asBracket">{</span>
                    new_event.sortAscending <span class="asOperator">=</span> <span class="asReserved">true</span>;
                    sortOrder <span class="asOperator">=</span> 1;
                <span class="asBracket">}</span>
                <span class="asReserved">else</span> 
                <span class="asBracket">{</span>
                    <span class="asVar">var</span> col<span class="asOperator">:</span>DataGridColumn <span class="asOperator">=</span> event.currentTarget.columns<span class="asBracket">[</span>event.columnIndex<span class="asBracket">]</span>;
                    new_event.sortAscending <span class="asOperator">=</span> col.sortDescending; <span class="asComment">// We want the opposite of the state before the header was clicked
</span>                    sortOrder <span class="asOperator">=</span> sortOrder <span class="asOperator">*</span> <span class="asOperator">-</span>1;
                    
                <span class="asBracket">}</span>
                _sortColumnIndex <span class="asOperator">=</span> event.columnIndex; <span class="asComment">// Remember for next time
</span>                new_event.sortOrder <span class="asOperator">=</span> sortOrder;                
                
                <span class="asReserved">this</span>.dispatchEvent<span class="asBracket">(</span>new_event<span class="asBracket">)</span>;
            <span class="asBracket">}</span>
            
            <span class="asComment">// The inner data grid
</span>            <span class="asReserved">protected</span> <span class="asVar">var</span> dg1<span class="asOperator">:</span>DataGrid;
            
            <span class="asReserved">protected</span> <span class="asFunction">function</span> innerGridBinding<span class="asBracket">(</span>event<span class="asOperator">:</span>Event<span class="asBracket">)</span><span class="asOperator">:</span><span class="asReserved">void</span>
            <span class="asBracket">{</span>
                <span class="asReserved">if</span> <span class="asBracket">(</span>allItems <span class="asOperator">&amp;&amp;</span> ext_data<span class="asBracket">)</span>
                <span class="asBracket">{</span>
                    <span class="asReserved">if</span> <span class="asBracket">(</span>dg1<span class="asBracket">)</span>
                    <span class="asBracket">{</span>
                        dg1.dataProvider <span class="asOperator">=</span> getMyItems<span class="asBracket">(</span>allItems, ext_data <span class="asBracket">)</span>;
                    <span class="asBracket">}</span>
                    <span class="asReserved">else</span>
                    <span class="asBracket">{</span>
                        getMyItems<span class="asBracket">(</span>allItems, ext_data <span class="asBracket">)</span>;
                    <span class="asBracket">}</span>                                        
                <span class="asBracket">}</span>
            <span class="asBracket">}</span>
            
            <span class="asComment">// Create the inner grid
</span>            <span class="asReserved">protected</span> <span class="asFunction">function</span> addInnerGrid<span class="asBracket">()</span><span class="asOperator">:</span>DataGrid
            <span class="asBracket">{</span>
                <span class="asComment">// Create the component
</span>                <span class="asVar">var</span> new_grid<span class="asOperator">:</span>DataGrid <span class="asOperator">=</span> <span class="asReserved">new</span> DataGrid<span class="asBracket">()</span>;
                
                setUpInnerGrid<span class="asBracket">(</span>new_grid<span class="asBracket">)</span>;
                
                <span class="asComment">// Add child to HBox
</span>                hb1.addChild<span class="asBracket">(</span>new_grid<span class="asBracket">)</span>;        
                
                <span class="asComment">// Finalise
</span>                dg1 <span class="asOperator">=</span> new_grid;
                <span class="asReserved">return</span> dg1;                            
            <span class="asBracket">}</span>
            
        
            <span class="asReserved">protected</span> <span class="asFunction">function</span> setUpInnerGrid<span class="asBracket">(</span>grid<span class="asOperator">:</span>DataGrid<span class="asBracket">)</span><span class="asOperator">:</span><span class="asReserved">void</span>        
            <span class="asBracket">{</span>
                <span class="asVar">var</span> tableReturned<span class="asOperator">:</span>XMLList;
                <span class="asVar">var</span> tablelength<span class="asOperator">:</span>int;
                
                tableReturned <span class="asOperator">=</span> <span class="asReserved">new</span> XMLList<span class="asBracket">(</span>getMyItems<span class="asBracket">(</span>allItems, ext_data <span class="asBracket">))</span>;
                tablelength <span class="asOperator">=</span> tableReturned.length<span class="asBracket">()</span>;

                <span class="asReserved">if</span> <span class="asBracket">(</span>tablelength <span class="asOperator">!=</span> 0<span class="asBracket">)</span> <span class="asBracket">{</span>

                    grid.setStyle<span class="asBracket">(</span><span class="asString">&quot;paddingTop&quot;</span>, 0<span class="asBracket">)</span>;
                    grid.height <span class="asOperator">=</span> <span class="asBracket">(</span>tablelength <span class="asOperator">*</span> 20<span class="asBracket">)</span> <span class="asOperator">+</span> 35;
                    grid.maxHeight <span class="asOperator">=</span> <span class="asBracket">(</span>tablelength <span class="asOperator">*</span> 20<span class="asBracket">)</span> <span class="asOperator">+</span> 35;
                
                    <span class="asVar">var</span> hc<span class="asOperator">:</span>Array <span class="asOperator">=</span> <span class="asBracket">[]</span>;
                    hc.push<span class="asBracket">(</span>0x009BE9<span class="asBracket">)</span>
                    hc.push<span class="asBracket">(</span>0x009BE9<span class="asBracket">)</span>;
                    grid.setStyle<span class="asBracket">(</span> <span class="asString">&quot;headerColors&quot;</span>, hc<span class="asBracket">)</span>;
                    grid.wordWrap <span class="asOperator">=</span> <span class="asReserved">true</span>;
                    grid.headerHeight <span class="asOperator">=</span> 32;
                    grid.columns <span class="asOperator">=</span> getColumns<span class="asBracket">(</span>formatXML.detailFields<span class="asBracket">)</span>;
                    grid.dataProvider <span class="asOperator">=</span> getMyItems<span class="asBracket">(</span>allItems, ext_data <span class="asBracket">)</span>;
                <span class="asBracket">}</span>
            <span class="asBracket">}</span>
            
            <span class="asReserved">protected</span> <span class="asFunction">function</span> createColumnHeaderWithHoverText<span class="asBracket">(</span>headerText<span class="asOperator">:</span>String<span class="asBracket">)</span><span class="asOperator">:</span>ClassFactory
            <span class="asBracket">{</span>
                <span class="asComment">//var cf:ClassFactory = new ClassFactory(mx.controls.dataGridClasses.DataGridItemRenderer);
</span>                <span class="asVar">var</span> cf <span class="asOperator">=</span> <span class="asReserved">new</span> ClassFactory<span class="asBracket">(</span>VDG.TipRenderer<span class="asBracket">)</span>
                cf.properties <span class="asOperator">=</span> <span class="asBracket">{</span> toolTipVDG<span class="asOperator">:</span> headerText <span class="asBracket">}</span>;
                <span class="asReserved">return</span> cf;
            <span class="asBracket">}</span>
        <span class="asBracket">]]</span><span class="asOperator">&gt;</span>
    <span class="mxmlTag">&lt;/mx:Script&gt;</span>
<span class="mxmlComment">&lt;!--</span><span class="mxmlComment">  width=&quot;{twidth}&quot; </span><span class="mxmlComment">--&gt;</span>
    <span class="mxmlComponent">&lt;mx:VBox</span> verticalGap=&quot;<span class="mxmlString">0</span>&quot; <span class="mxmlComponent">&gt;</span>  
        <span class="mxmlComponent">&lt;mx:HBox</span> paddingTop=&quot;<span class="mxmlString">0</span>&quot; paddingBottom=&quot;<span class="mxmlString">0</span>&quot; <span class="mxmlComponent">&gt;</span> 
            <span class="mxmlComponent">&lt;mx:DataGrid</span>  id=&quot;<span class="mxmlString">DGmain</span>&quot; 
                          height=&quot;<span class="mxmlString">{</span>setHeight<span class="asBracket">()</span><span class="mxmlString">}</span>&quot;                          
                          showHeaders=&quot;<span class="mxmlString">{</span>displayTitle<span class="asBracket">()</span><span class="mxmlString">}</span>&quot; 
                          headerColors=&quot;<span class="mxmlString">[0x009BE9, 0x009BE9]</span>&quot; 
                          rowCount=&quot;<span class="mxmlString">1</span>&quot; headerHeight=&quot;<span class="mxmlString">40</span>&quot; wordWrap=&quot;<span class="mxmlString">true</span>&quot; 
                          columns=&quot;<span class="mxmlString">{</span>getColumns<span class="asBracket">(</span>formatXML.headerFields<span class="asBracket">)</span><span class="mxmlString">}</span>&quot;
                          dataProvider=&quot;<span class="mxmlString">{</span>ext_data<span class="mxmlString">}</span>&quot;
                          selectable=&quot;<span class="mxmlString">false</span>&quot;
                          headerRelease=&quot;onGridSort<span class="asBracket">(</span>event<span class="asBracket">)</span>&quot;
                          paddingBottom=&quot;<span class="mxmlString">0</span>&quot;
                          paddingTop=&quot;<span class="mxmlString">0</span>&quot;
                          draggableColumns=&quot;<span class="mxmlString">false</span>&quot;
                          resizableColumns=&quot;<span class="mxmlString">true</span>&quot; 
                          horizontalScrollPolicy=&quot;<span class="mxmlString">off</span>&quot; verticalScrollPolicy=&quot;<span class="mxmlString">off</span>&quot;<span class="mxmlComponent">&gt;</span>
            <span class="mxmlComponent">&lt;/mx:DataGrid&gt;</span>
        <span class="mxmlComponent">&lt;/mx:HBox&gt;</span>     
        <span class="mxmlComponent">&lt;mx:HBox</span> id=&quot;<span class="mxmlString">hb1</span>&quot; visible=&quot;<span class="mxmlString">false</span>&quot; includeInLayout=&quot;<span class="mxmlString">false</span>&quot;<span class="mxmlComponent">&gt;</span>
            <span class="mxmlComponent">&lt;mx:Spacer</span> width=&quot;<span class="mxmlString">20</span>&quot; <span class="mxmlComponent">/&gt;</span>
        <span class="mxmlComponent">&lt;/mx:HBox&gt;</span>  
    <span class="mxmlComponent">&lt;/mx:VBox&gt;</span>      
<span class="mxmlComponent">&lt;/mx:Canvas&gt;</span></pre></body>
</html>
