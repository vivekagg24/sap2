// ActionScript file
import mx.collections.XMLListCollection;import mx.controls.Alert;

/* protected function addSID(sid:String, desc:String):XML{	var s:String = "<item><SID>" + sid + "</SID><DESCRIPTION>" + desc + "</DESCRIPTION></item>";	var x:XML = new XML(s)	return x;} */// If running locally, create a dummy list of Group IDs for test purposes. /* protected function getDummySIDList():XMLListCollection{	var ret:XMLListCollection = new XMLListCollection();	ret.addItem( addSID("LEV", "Leave Request") );	ret.addItem( addSID("ASL" , "ASL") );	ret.addItem( addSID("HR" , "HR Forms" ) );	return ret;} public function getSystemName(sid:String):String { 	var desc:String = ""; 	 	 	 	var config_x:XML = cas_config.SYSTEM.(ID==sid)[0]; 	 	if (!config_x && sid != "ASL" && sid != "") 		Alert.show("Cannot find system with id " + sid); 	else if (!config_x && sid == 'ASL') 	{ 		desc = "ASL - "; 	}  	else if (sid == "") 	{ 		desc = "[blank]"; 	}	 	else 	{ 		desc = config_x.DESCRIPTION; 	}		return desc; }  */protected function addGroup(groupid:String, groupdesc:String ):XML{	if (groupdesc.length == 0) groupdesc = "[ " + groupid + " ]";		var s:String = "<item><SUBAPPSGRP>" + groupid + "</SUBAPPSGRP><GROUPDESC>" + groupdesc + "</GROUPDESC></item>";	var x:XML = new XML(s)	return x;}// If running locally, create a dummy list of SIDs for test purposes. 
protected function getDummyGroupList():XMLListCollection{	var ret:XMLListCollection = new XMLListCollection();	ret.addItem( addGroup("LEV", "Leave Request") );	ret.addItem( addGroup("ASL", "ASL" ) );			return ret;	
}// Function called when user's roles are returned from Portal// Build up list of systems of user// Then call R3 to get substitutespublic function getCurrentUserRolesCallback(s:String):void{	// Update the progress bar	this.progBar.setProgress(2, 4);		// Convert the data to XML	var roles:XML = new XML(s);		// Intialise the list of systems for the currrent logged in user	var _user_cas_systems:XMLListCollection = new XMLListCollection();	var _user_cas_groups:XMLListCollection  = new XMLListCollection();		for each (var x:XML in roles.user.role)	{		var roleName:String = x;				var xl:XMLList = cas_config.SYSTEM.(ROLE==roleName);		if (xl == null || xl.length() == 0)		{			// Not a CAS role			//Alert.show(roleName + " is not a cas role" )		}		else		{			var system_id:String = xl[0].ID;			var system_desc:String = xl[0].DESCRIPTION;			var group_id:String = "";			try {group_id = xl[0].SUBAPPSGRP} catch (e:Error) {}						var subs_allowed:String = xl[0].SUBAPPS;						if (subs_allowed == 'X') // Some areas of CAS, e.g. CMS, don't have substitution			{ 				 				// * _user_cas_systems.addItem( addSID(system_id, system_desc ) );				var subgroup_already_present:XMLList = null;				try				{					subgroup_already_present = (_user_cas_groups.source as XMLList).(child("SUBAPPSGRP")==group_id);				}				catch (e:Error)				{									}												if (subgroup_already_present && subgroup_already_present.length() > 0 )				{					// Do nothing, already present				}				else				{					var gDesc:String = "";					try {gDesc = xl[0].SUBAPPSGRPDESC;} catch (e:Error) {};					var newGroup:XML = addGroup( group_id , xl[0].GROUPDESC );					_user_cas_groups.addItem( newGroup );				}							}					}	}		// Fill data to call R3	this.user_cas_systems = _user_cas_systems;	this.user_cas_groups  = _user_cas_groups;		// CALL r3	wsR3.Z_CAS_GET_POSSIBLE_SUBS.send();	wsR3.Z_CAS_GET_SUBSTITUTES_CURRENT.send();
} /** Receive the CAS config file * */ protected function cas_config_result(event:ResultEvent):void { 	try {		cas_config = new XML(event.message.body);	}	catch (e:Error)	{		Alert.show("Error with CAS config file : " + e.toString() );		}					// Make sure we have username before going to step 2	try {		if (!this.userName || this.userName.length == 0) 		{			this.userName   = ExternalInterface.call("getUname"); // call javascript on BSP				}	}	catch (e:Error)	{		Alert.show("Error with username : " + e.toString() );	}		//Alert.show("CAS Config " + cas_config.text());	loadStep2(); // Now get step 2, the user data from portal } public function loadStep2():void{	this.progBar.setProgress(1, 4);							// Get user and role data from portal - Step 2		if (Security.sandboxType != Security.REMOTE)  // Running locally, so create dummy test data     	{     	// *	user_cas_systems = getDummySIDList();         		user_cas_groups  = getDummyGroupList();     		// CALL r3			wsR3.Z_CAS_GET_POSSIBLE_SUBS.send();			wsR3.Z_CAS_GET_SUBSTITUTES_CURRENT.send(); 		    		     	}	     	else // This is the "real life" scenario     	{          		//ExternalInterface.call("getUserRoles", "gyork");		     		    		     	    ExternalInterface.call("getUserRoles", this.userName);     	      	   	 // Call the javascript, which will by return call function      	   	 // getCurrentUserRolesCallback, which itself initiates the calls to R3     	}   } public function getGroupName(grpid:String):String { 	var desc:String = ""; 	 	 	 var config_x:XML; 	  	 try  	 { 	 	/** The e4x expression cas_config.SYSTEM.(SUBAPPSGRP == grpid) gives error 1065, since not all 	 	 * elements have a child called "SUBAPPSGRP". Therefore we have to take a slightly more long-winded approach 	 	 */ 	 	 	 	var l:XMLList = cas_config.SYSTEM.(child("SUBAPPSGRP")==grpid); 	 	 	 	config_x = l[0]; 	 }  	 catch (e:Error) 	 { 	 	Alert.show(e.toString()); 	 } 	 	if (!config_x && grpid != "ASL" && grpid != "") 	{ 		Alert.show("Cannot find group with id " + grpid); 	} 		 	else if (!config_x && grpid == 'ASL') 	{ 		desc = "ASL - "; 	} 	else if (grpid == "") 	{ 		desc = "[blank]"; 	} 	else 	{ 		desc = config_x.GROUPDESC; 		if (desc.length == 0) 			desc = "[" + grpid + "]"; 	}		return desc; }